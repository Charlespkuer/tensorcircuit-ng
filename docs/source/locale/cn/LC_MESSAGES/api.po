# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The TensorCircuit Authors
# This file is distributed under the same license as the tensorcircuit
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tensorcircuit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-17 23:02+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/api/applications.rst:2
msgid "tensorcircuit.applications"
msgstr ""

#: ../../source/api/applications/dqas.rst:2
msgid "tensorcircuit.applications.dqas"
msgstr ""

#: ../../source/api/applications/graphdata.rst:2
msgid "tensorcircuit.applications.graphdata"
msgstr ""

#: ../../source/api/applications/layers.rst:2
msgid "tensorcircuit.applications.layers"
msgstr ""

#: ../../source/api/applications/utils.rst:2
msgid "tensorcircuit.applications.utils"
msgstr ""

#: ../../source/api/applications/vags.rst:2
msgid "tensorcircuit.applications.vags"
msgstr ""

#: ../../source/api/applications/van.rst:2
msgid "tensorcircuit.applications.van"
msgstr ""

#: ../../source/api/applications/vqes.rst:2
msgid "tensorcircuit.applications.vqes"
msgstr ""

#: ../../source/api/backends.rst:2
msgid "tensorcircuit.backends"
msgstr ""

#: ../../source/api/backends/backend_factory.rst:2
msgid "tensorcircuit.backends.backend_factory"
msgstr ""

#: ../../source/api/backends/jax_backend.rst:2
msgid "tensorcircuit.backends.jax_backend"
msgstr ""

#: ../../source/api/backends/numpy_backend.rst:2
msgid "tensorcircuit.backends.numpy_backend"
msgstr ""

#: ../../source/api/backends/pytorch_backend.rst:2
msgid "tensorcircuit.backends.pytorch_backend"
msgstr ""

#: ../../source/api/backends/tensorflow_backend.rst:2
msgid "tensorcircuit.backends.tensorflow_backend"
msgstr ""

#: ../../source/api/channels.rst:2
msgid "tensorcircuit.channels"
msgstr ""

#: ../../source/api/circuit.rst:2
msgid "tensorcircuit.circuit"
msgstr ""

#: ../../source/api/cons.rst:2
msgid "tensorcircuit.cons"
msgstr ""

#: ../../source/api/densitymatrix.rst:2
msgid "tensorcircuit.densitymatrix"
msgstr ""

#: ../../source/api/densitymatrix2.rst:2
msgid "tensorcircuit.densitymatrix2"
msgstr ""

#: ../../source/api/experimental.rst:2
msgid "tensorcircuit.experimental"
msgstr ""

#: ../../source/api/gates.rst:2
msgid "tensorcircuit.gates"
msgstr ""

#: ../../source/api/interfaces.rst:2
msgid "tensorcircuit.interfaces"
msgstr ""

#: ../../source/api/keras.rst:2
msgid "tensorcircuit.keras"
msgstr ""

#: ../../source/api/mps_base.rst:2
msgid "tensorcircuit.mps_base"
msgstr ""

#: ../../source/api/mpscircuit.rst:2
msgid "tensorcircuit.mpscircuit"
msgstr ""

#: ../../source/api/quantum.rst:2
msgid "tensorcircuit.quantum"
msgstr ""

#: ../../source/api/simplify.rst:2
msgid "tensorcircuit.simplify"
msgstr ""

#: ../../source/api/templates.rst:2
msgid "tensorcircuit.templates"
msgstr ""

#: ../../source/api/templates/blocks.rst:2
msgid "tensorcircuit.templates.blocks"
msgstr ""

#: ../../source/api/templates/graphs.rst:2
msgid "tensorcircuit.templates.graphs"
msgstr ""

#: ../../source/api/templates/measurements.rst:2
msgid "tensorcircuit.templates.measurements"
msgstr ""

#: ../../source/api/utils.rst:2
msgid "tensorcircuit.utils"
msgstr ""

#: ../../source/api/vis.rst:2
msgid "tensorcircuit.vis"
msgstr ""

#~ msgid ""
#~ "This is a method that implementers "
#~ "of subclasses of `Layer` or `Model` "
#~ "can override if they need a "
#~ "state-creation step in-between layer "
#~ "instantiation and layer call."
#~ msgstr ""

#~ msgid "This is typically used to create the weights of `Layer` subclasses."
#~ msgstr ""

#~ msgid ""
#~ "Note here that `call()` method in "
#~ "`tf.keras` is little bit different from"
#~ " `keras` API. In `keras` API, you "
#~ "can pass support masking for layers "
#~ "as additional arguments. Whereas `tf.keras`"
#~ " has `compute_mask()` method to support "
#~ "masking."
#~ msgstr ""

#~ msgid "Modules for DQAS framework"
#~ msgstr ""

#~ msgid "DQAS framework entrypoint"
#~ msgstr ""

#~ msgid "Parameters"
#~ msgstr ""

#~ msgid ""
#~ "function with input of data instance,"
#~ " circuit parameters theta and structural"
#~ " paramter k, return tuple of "
#~ "objective value and gradient with "
#~ "respect to theta"
#~ msgstr ""

#~ msgid "data generator as dataset"
#~ msgstr ""

#~ msgid "list of operations as primitive operator pool"
#~ msgstr ""

#~ msgid "the default layer number of the circuit ansatz"
#~ msgstr ""

#~ msgid ""
#~ "shape of circuit parameter pool, in "
#~ "general p_stp*l, where l is the "
#~ "max number of circuit parameters for "
#~ "op in the operator pool"
#~ msgstr ""

#~ msgid "the same as p in the most times"
#~ msgstr ""

#~ msgid "batch size of one epoch"
#~ msgstr ""

#~ msgid "prethermal update times"
#~ msgstr ""

#~ msgid "training epochs"
#~ msgstr ""

#~ msgid "parallel thread number, 0 to disable multiprocessing model by default"
#~ msgstr ""

#~ msgid "set verbose log to print"
#~ msgstr ""

#~ msgid "function to output verbose information"
#~ msgstr ""

#~ msgid "function return intermiediate result for final history list"
#~ msgstr ""

#~ msgid "cutoff probability to avoid peak distribution"
#~ msgstr ""

#~ msgid ""
#~ "function accepting list of objective "
#~ "values and return the baseline value "
#~ "used in the next round"
#~ msgstr ""

#~ msgid "return noise with the same shape as circuit parameter pool"
#~ msgstr ""

#~ msgid "initial values for circuit parameter pool"
#~ msgstr ""

#~ msgid "initial values for probabilistic model parameters"
#~ msgstr ""

#~ msgid "optimizer for circuit parameters theta"
#~ msgstr ""

#~ msgid "optimizer for model parameters alpha"
#~ msgstr ""

#~ msgid "optimizer for circuit parameters in prethermal stage"
#~ msgstr ""

#~ msgid "fixed structural parameters for prethermal training"
#~ msgstr ""

#~ msgid "regularization function for model parameters alpha"
#~ msgstr ""

#~ msgid "regularization function for circuit parameters theta"
#~ msgstr ""

#~ msgid "Returns"
#~ msgstr ""

#~ msgid ""
#~ "The probabilistic model based DQAS, can"
#~ " use extensively for DQAS case for"
#~ " ``NMF`` probabilistic model."
#~ msgstr ""

#~ msgid "vag func, return loss and nabla lnp"
#~ msgstr ""

#~ msgid "keras model"
#~ msgstr ""

#~ msgid "sample func of logic with keras model input"
#~ msgstr ""

#~ msgid "input data pipeline generator"
#~ msgstr ""

#~ msgid "operation pool"
#~ msgstr ""

#~ msgid "depth for DQAS"
#~ msgstr ""

#~ msgid "parallel kernels"
#~ msgstr ""

#~ msgid "final loss function in terms of average of sub loss for each circuit"
#~ msgstr ""

#~ msgid "derivative function for ``loss_func``"
#~ msgstr ""

#~ msgid ""
#~ "Call in customized functions and grab"
#~ " variables within DQAS framework function"
#~ " by var name str."
#~ msgstr ""

#~ msgid "The DQAS framework function"
#~ msgstr ""

#~ msgid "Variables within the DQAS framework"
#~ msgstr ""

#~ msgid "Return type"
#~ msgstr ""

#~ msgid ""
#~ "This function works only when nnp "
#~ "has the same shape as stp, i.e."
#~ " one parameter for each op."
#~ msgstr ""

#~ msgid "The kernel for multiprocess to run parallel in DQAS function/"
#~ msgstr ""

#~ msgid ""
#~ "parallel variational parameter training and"
#~ " search to avoid local minimum not"
#~ " limited to qaoa setup as the "
#~ "function name indicates, as long as "
#~ "you provided suitable `vag_func`"
#~ msgstr ""

#~ msgid "data input generator for vag_func"
#~ msgstr ""

#~ msgid "vag_kernel"
#~ msgstr ""

#~ msgid "number of tries"
#~ msgstr ""

#~ msgid ""
#~ "for optimization problem the input is"
#~ " in general fixed so batch is "
#~ "often 1"
#~ msgstr ""

#~ msgid "number of parallel jobs"
#~ msgstr ""

#~ msgid "mean value of normal distribution for nnp"
#~ msgstr ""

#~ msgid "std deviation of normal distribution for nnp"
#~ msgstr ""

#~ msgid "Doesn't support prob model DQAS search."
#~ msgstr ""

#~ msgid "Modules for graph instance data and more"
#~ msgstr ""

#~ msgid "```python d = nx.to_dict_of_dicts(g) ```"
#~ msgstr ""

#~ msgid "1D PBC chain with n sites."
#~ msgstr ""

#~ msgid "The number of nodes"
#~ msgstr ""

#~ msgid "The resulted graph g"
#~ msgstr ""

#~ msgid "all graphs with m edge out from g"
#~ msgstr ""

#~ msgid ""
#~ "Generate a reduced graph with given "
#~ "ratio of edges compared to the "
#~ "original graph g."
#~ msgstr ""

#~ msgid "The base graph"
#~ msgstr ""

#~ msgid "number of edges kept, default half of the edges"
#~ msgstr ""

#~ msgid "The resulted reduced graph"
#~ msgstr ""

#~ msgid "Split the graph in exactly ``split`` piece evenly."
#~ msgstr ""

#~ msgid "The mother graph"
#~ msgstr ""

#~ msgid "The number of the graph we want to divide into, defaults to 2"
#~ msgstr ""

#~ msgid "List of graph instance of size ``split``"
#~ msgstr ""

#~ msgid "Module for functions adding layers of circuits"
#~ msgstr ""

#~ msgid "Hlayer"
#~ msgstr ""

#~ msgid "anyrxlayer"
#~ msgstr ""

#~ msgid "anyrylayer"
#~ msgstr ""

#~ msgid "anyrzlayer"
#~ msgstr ""

#~ msgid "anyswaplayer"
#~ msgstr ""

#~ msgid "anyxxlayer"
#~ msgstr ""

#~ msgid "anyxylayer"
#~ msgstr ""

#~ msgid "anyxzlayer"
#~ msgstr ""

#~ msgid "anyyxlayer"
#~ msgstr ""

#~ msgid "anyyylayer"
#~ msgstr ""

#~ msgid "anyyzlayer"
#~ msgstr ""

#~ msgid "anyzxlayer"
#~ msgstr ""

#~ msgid "anyzylayer"
#~ msgstr ""

#~ msgid "anyzzlayer"
#~ msgstr ""

#~ msgid "cnotlayer"
#~ msgstr ""

#~ msgid "rxlayer"
#~ msgstr ""

#~ msgid "rylayer"
#~ msgstr ""

#~ msgid "rzlayer"
#~ msgstr ""

#~ msgid "swaplayer"
#~ msgstr ""

#~ msgid "xxgate"
#~ msgstr ""

#~ msgid "xxlayer"
#~ msgstr ""

#~ msgid "xygate"
#~ msgstr ""

#~ msgid "xylayer"
#~ msgstr ""

#~ msgid "xzgate"
#~ msgstr ""

#~ msgid "xzlayer"
#~ msgstr ""

#~ msgid "yxgate"
#~ msgstr ""

#~ msgid "yxlayer"
#~ msgstr ""

#~ msgid "yygate"
#~ msgstr ""

#~ msgid "yylayer"
#~ msgstr ""

#~ msgid "yzgate"
#~ msgstr ""

#~ msgid "yzlayer"
#~ msgstr ""

#~ msgid "zxgate"
#~ msgstr ""

#~ msgid "zxlayer"
#~ msgstr ""

#~ msgid "zygate"
#~ msgstr ""

#~ msgid "zylayer"
#~ msgstr ""

#~ msgid "zzgate"
#~ msgstr ""

#~ msgid "zzlayer"
#~ msgstr ""

#~ msgid "$$e^{-i     heta_i \\sigma}$$"
#~ msgstr ""

#~ msgid ""
#~ "The following function should be used"
#~ " to generate layers with special "
#~ "case. As its soundness depends on "
#~ "the nature of the task or problem,"
#~ " it doesn't always make sense."
#~ msgstr ""

#~ msgid "$$e^{-i heta \\sigma}$$"
#~ msgstr ""

#~ msgid "$$e^{-i     heta \\sigma}$$"
#~ msgstr ""

#~ msgid ""
#~ "A collection of useful function snippets"
#~ " that irrelevant with the main "
#~ "modules or await for furthere refactor"
#~ msgstr ""

#~ msgid "Bases: :py:class:`object`"
#~ msgstr ""

#~ msgid ""
#~ "color cirq circuit SVG for given "
#~ "gates, a small tool to hack the"
#~ " cirq SVG"
#~ msgstr ""

#~ msgid "integer coordinate which gate is colored"
#~ msgstr ""

#~ msgid "transform repr form of an array to real numpy array"
#~ msgstr ""

#~ msgid "DQAS application kernels as vag functions"
#~ msgstr ""

#~ msgid "1D array for full wavefunction, the basis is in lexcical order"
#~ msgstr ""

#~ msgid "nx.Graph"
#~ msgstr ""

#~ msgid "transformation functions before averaged"
#~ msgstr ""

#~ msgid "as f3"
#~ msgstr ""

#~ msgid "maxcut energy for n qubit wavefunction i-th basis"
#~ msgstr ""

#~ msgid "ranged from 0 to 2**n-1"
#~ msgstr ""

#~ msgid "number of qubits"
#~ msgstr ""

#~ msgid ""
#~ "deprecated as non tf and non "
#~ "flexible, use the combination of "
#~ "``reduced_density_matrix`` and ``entropy`` instead."
#~ msgstr ""

#~ msgid "deprecated, current version in tc.quantum"
#~ msgstr ""

#~ msgid ""
#~ "value and gradient, currently only "
#~ "tensorflow backend is supported jax and"
#~ " numpy seems to be slow in "
#~ "circuit simulation anyhow. *deprecated*"
#~ msgstr ""

#~ msgid "if lbd=0, take energy as objective"
#~ msgstr ""

#~ msgid "if as default 0, overlap will not compute in the process"
#~ msgstr ""

#~ msgid "Fill single qubit gates according to placeholder on circuit"
#~ msgstr ""

#~ msgid "Hamiltonian measurements for Heisenberg model on graph lattice g"
#~ msgstr ""

#~ msgid "short cut for ``cirq.LineQubit(i)``"
#~ msgstr ""

#~ msgid "QAOA block encoding kernel, support 2 params in one op"
#~ msgstr ""

#~ msgid ""
#~ "training QAOA with only optimizing "
#~ "circuit parameters, can be well replaced"
#~ " with more general function `DQAS_search`"
#~ msgstr ""

#~ msgid "multi parameter for one layer"
#~ msgstr ""

#~ msgid "kw arguments for measurements_func"
#~ msgstr ""

#~ msgid "loss function, gradient of nnp"
#~ msgstr ""

#~ msgid ""
#~ "tensorflow quantum backend compare to "
#~ "qaoa_vag which is tensorcircuit backend"
#~ msgstr ""

#~ msgid "Hamiltonian for tfim on lattice defined by graph g"
#~ msgstr ""

#~ msgid "cirq.PauliSum as operators for tfq expectation layer"
#~ msgstr ""

#~ msgid ""
#~ "generate random wavefunction from "
#~ "approximately Haar measure, reference:  "
#~ "https://doi.org/10.1063/1.4983266"
#~ msgstr ""

#~ msgid "repetition of the blocks"
#~ msgstr ""

#~ msgid "random Haar measure approximation"
#~ msgstr ""

#~ msgid "cirq.Circuit, empty circuit"
#~ msgstr ""

#~ msgid "# of qubit"
#~ msgstr ""

#~ msgid ""
#~ "One-hot variational autoregressive models "
#~ "for multiple categorical choices beyond "
#~ "binary"
#~ msgstr ""

#~ msgid "Bases: :py:class:`keras.engine.training.Model`"
#~ msgstr ""

#~ msgid "Calls the model on new inputs and returns the outputs as tensors."
#~ msgstr ""

#~ msgid ""
#~ "In this case `call()` just reapplies "
#~ "all ops in the graph to the "
#~ "new inputs (e.g. build a new "
#~ "computational graph from the provided "
#~ "inputs)."
#~ msgstr ""

#~ msgid ""
#~ "Note: This method should not be "
#~ "called directly. It is only meant "
#~ "to be overridden when subclassing "
#~ "`tf.keras.Model`. To call a model on "
#~ "an input, always use the `__call__()`"
#~ " method, i.e. `model(inputs)`, which relies"
#~ " on the underlying `call()` method."
#~ msgstr ""

#~ msgid "Args:"
#~ msgstr ""

#~ msgid ""
#~ "inputs: Input tensor, or dict/list/tuple "
#~ "of input tensors. training: Boolean or"
#~ " boolean scalar tensor, indicating whether"
#~ " to run"
#~ msgstr ""

#~ msgid "the `Network` in training mode or inference mode."
#~ msgstr ""

#~ msgid "mask: A mask or list of masks. A mask can be either a boolean tensor or"
#~ msgstr ""

#~ msgid "None (no mask). For more details, check the guide"
#~ msgstr ""

#~ msgid "[here](https://www.tensorflow.org/guide/keras/masking_and_padding)."
#~ msgstr ""

#~ msgid "Returns:"
#~ msgstr ""

#~ msgid ""
#~ "A tensor if there is a single "
#~ "output, or a list of tensors if"
#~ " there are more than one outputs."
#~ msgstr ""

#~ msgid "Bases: :py:class:`keras.engine.base_layer.Layer`"
#~ msgstr ""

#~ msgid ""
#~ "Creates the variables of the layer "
#~ "(optional, for subclass implementers)."
#~ msgstr ""

#~ msgid ""
#~ "This is a method that implementers "
#~ "of subclasses of `Layer` or `Model` "
#~ "can override if they need a "
#~ "state-creation step in-between layer "
#~ "instantiation and layer call. It is "
#~ "invoked automatically before the first "
#~ "execution of `call()`."
#~ msgstr ""

#~ msgid ""
#~ "This is typically used to create "
#~ "the weights of `Layer` subclasses (at"
#~ " the discretion of the subclass "
#~ "implementer)."
#~ msgstr ""

#~ msgid "input_shape: Instance of `TensorShape`, or list of instances of"
#~ msgstr ""

#~ msgid ""
#~ "`TensorShape` if the layer expects a "
#~ "list of inputs (one instance per "
#~ "input)."
#~ msgstr ""

#~ msgid "This is where the layer's logic lives."
#~ msgstr ""

#~ msgid ""
#~ "The `call()` method may not create "
#~ "state (except in its first invocation,"
#~ " wrapping the creation of variables "
#~ "or other resources in `tf.init_scope()`). "
#~ "It is recommended to create state "
#~ "in `__init__()`, or the `build()` method"
#~ " that is called automatically before "
#~ "`call()` executes the first time."
#~ msgstr ""

#~ msgid "inputs: Input tensor, or dict/list/tuple of input tensors."
#~ msgstr ""

#~ msgid ""
#~ "The first positional `inputs` argument "
#~ "is subject to special rules: - "
#~ "`inputs` must be explicitly passed. A"
#~ " layer cannot have zero"
#~ msgstr ""

#~ msgid ""
#~ "arguments, and `inputs` cannot be "
#~ "provided via the default value of "
#~ "a keyword argument."
#~ msgstr ""

#~ msgid "NumPy array or Python scalar values in `inputs` get cast as tensors."
#~ msgstr ""

#~ msgid "Keras mask metadata is only collected from `inputs`."
#~ msgstr ""

#~ msgid ""
#~ "Layers are built (`build(input_shape)` method)"
#~ " using shape info from `inputs` only."
#~ msgstr ""

#~ msgid "`input_spec` compatibility is only checked against `inputs`."
#~ msgstr ""

#~ msgid ""
#~ "Mixed precision input casting is only"
#~ " applied to `inputs`. If a layer "
#~ "has tensor arguments in `*args` or "
#~ "`**kwargs`, their casting behavior in "
#~ "mixed precision should be handled "
#~ "manually."
#~ msgstr ""

#~ msgid "The SavedModel input specification is generated using `inputs` only."
#~ msgstr ""

#~ msgid ""
#~ "Integration with various ecosystem packages"
#~ " like TFMOT, TFLite, TF.js, etc is"
#~ " only supported for `inputs` and not"
#~ " for tensors in positional and "
#~ "keyword arguments."
#~ msgstr ""

#~ msgid "*args: Additional positional arguments. May contain tensors, although"
#~ msgstr ""

#~ msgid "this is not recommended, for the reasons above."
#~ msgstr ""

#~ msgid "**kwargs: Additional keyword arguments. May contain tensors, although"
#~ msgstr ""

#~ msgid ""
#~ "this is not recommended, for the "
#~ "reasons above. The following optional "
#~ "keyword arguments are reserved: - "
#~ "`training`: Boolean scalar tensor of "
#~ "Python boolean indicating"
#~ msgstr ""

#~ msgid "whether the `call` is meant for training or inference."
#~ msgstr ""

#~ msgid ""
#~ "`mask`: Boolean input mask. If the "
#~ "layer's `call()` method takes a `mask`"
#~ " argument, its default value will be"
#~ " set to the mask generated for "
#~ "`inputs` by the previous layer (if "
#~ "`input` did come from a layer that"
#~ " generated a corresponding mask, i.e. "
#~ "if it came from a Keras layer "
#~ "with masking support)."
#~ msgstr ""

#~ msgid "A tensor or list/tuple of tensors."
#~ msgstr ""

#~ msgid "Relevant classes for VQNHE"
#~ msgstr ""

#~ msgid ""
#~ "Bases: "
#~ ":py:class:`keras.optimizer_v2.learning_rate_schedule.LearningRateSchedule`"
#~ msgstr ""

#~ msgid "Dense layer but with complex weights, used for building complex RBM"
#~ msgstr ""

#~ msgid "VQNHE"
#~ msgstr ""

#~ msgid "[description]"
#~ msgstr ""

#~ msgid "VQE"
#~ msgstr ""

#~ msgid "Backend register"
#~ msgstr ""

#~ msgid "Get the `tc.backend` object."
#~ msgstr ""

#~ msgid "\"numpy\", \"tensorflow\", \"jax\", \"pytorch\""
#~ msgstr ""

#~ msgid "Raises"
#~ msgstr ""

#~ msgid "Backend doesn't exist for `backend` argument."
#~ msgstr ""

#~ msgid "The `tc.backend` object that with all registered universal functions."
#~ msgstr ""

#~ msgid "Backend magic inherited from tensornetwork: jax backend"
#~ msgstr ""

#~ msgid "Bases: :py:class:`tensornetwork.backends.jax.jax_backend.JaxBackend`"
#~ msgstr ""

#~ msgid ""
#~ "See the original backend API at "
#~ "``jax backend``. "
#~ "<https://github.com/google/TensorNetwork/blob/master/tensornetwork/backends/jax/jax_backend.py>`_"
#~ msgstr ""

#~ msgid "Returns the elementwise absolute value of tensor. Args:"
#~ msgstr ""

#~ msgid "tensor: An input tensor."
#~ msgstr ""

#~ msgid "tensor: Its elementwise absolute value."
#~ msgstr ""

#~ msgid "Return the index of maximum of an array an axis."
#~ msgstr ""

#~ msgid "[description], defaults to 0, different behavior from numpy defaults!"
#~ msgstr ""

#~ msgid "Return the index of minimum of an array an axis."
#~ msgstr ""

#~ msgid "Cast the tensor dtype of a ``a``."
#~ msgstr ""

#~ msgid "tensor"
#~ msgstr ""

#~ msgid "\"float32\", \"float64\", \"complex64\", \"complex128\""
#~ msgstr ""

#~ msgid "``a`` of new dtype"
#~ msgstr ""

#~ msgid "Join a sequence of arrays along an existing axis."
#~ msgstr ""

#~ msgid "[description], defaults to 0"
#~ msgstr ""

#~ msgid ""
#~ "The native cond for XLA compiling, "
#~ "wrapper for ``tf.cond`` and limited "
#~ "functionality of ``jax.lax.cond``."
#~ msgstr ""

#~ msgid "Convert a np.array or a tensor to a tensor type for the backend."
#~ msgstr ""

#~ msgid ""
#~ "Generate the coo format sparse matrix"
#~ " from indices and values, which is"
#~ " the only sparse format supported in"
#~ " different ML backends."
#~ msgstr ""

#~ msgid "shape [n, 2] for n non zero values in the returned matrix"
#~ msgstr ""

#~ msgid "shape [n]"
#~ msgstr ""

#~ msgid "Tuple[int, ...]"
#~ msgstr ""

#~ msgid "Return the expm of ``a``, matrix exponential."
#~ msgstr ""

#~ msgid "tensor in matrix form"
#~ msgstr ""

#~ msgid "matrix exponential of matrix ``a``"
#~ msgstr ""

#~ msgid "Return the cosine of a tensor ``a``."
#~ msgstr ""

#~ msgid "cosine of ``a``"
#~ msgstr ""

#~ msgid "Return the cumulative sum of the elements along a given axis."
#~ msgstr ""

#~ msgid ""
#~ "The default behavior is the same "
#~ "as numpy, different from tf/torch as "
#~ "cumsum of the flatten 1D array, "
#~ "defaults to None"
#~ msgstr ""

#~ msgid "Return the copy of tensor ''a''."
#~ msgstr ""

#~ msgid "Return an identity matrix of dimension `dim`"
#~ msgstr ""

#~ msgid ""
#~ "Depending on specific backends, `dim` "
#~ "has to be either an int (numpy,"
#~ " torch, tensorflow) or a `ShapeType` "
#~ "object (for block-sparse backends). "
#~ "Block-sparse behavior is currently not "
#~ "supported"
#~ msgstr ""

#~ msgid ""
#~ "N (int): The dimension of the "
#~ "returned matrix. dtype: The dtype of "
#~ "the returned matrix. M (int): The "
#~ "dimension of the returned matrix."
#~ msgstr ""

#~ msgid "Return the function which is the grad function of input ``f``."
#~ msgstr ""

#~ msgid "Example"
#~ msgstr ""

#~ msgid "the function to be differentiated"
#~ msgstr ""

#~ msgid ""
#~ "the position of args in ``f`` that"
#~ " are to be differentiated, defaults "
#~ "to be 0"
#~ msgstr ""

#~ msgid "the grad function of ``f`` with the same set of arguments as ``f``"
#~ msgstr ""

#~ msgid "Return 1.j in as a tensor compatible with the backend."
#~ msgstr ""

#~ msgid "\"complex64\" or \"complex128\""
#~ msgstr ""

#~ msgid "1.j tensor"
#~ msgstr ""

#~ msgid "Return the elementwise imaginary value of a tensor ``a``."
#~ msgstr ""

#~ msgid "imaginary value of ``a``"
#~ msgstr ""

#~ msgid "[summary]"
#~ msgstr ""

#~ msgid "The possible options"
#~ msgstr ""

#~ msgid "Sampling output shape"
#~ msgstr ""

#~ msgid ""
#~ "probability for each option in a, "
#~ "defaults to None, as equal probability"
#~ " distribution"
#~ msgstr ""

#~ msgid ""
#~ "Call the random normal function with "
#~ "the random state management behind the"
#~ " scene."
#~ msgstr ""

#~ msgid "[description], defaults to 1"
#~ msgstr ""

#~ msgid "[description], defaults to \"32\""
#~ msgstr ""

#~ msgid "Determine whether the type of input ``a`` is  ``sparse``."
#~ msgstr ""

#~ msgid "input matrix ``a``"
#~ msgstr ""

#~ msgid "a bool indicating whether the matrix ``a`` is sparse"
#~ msgstr ""

#~ msgid "Return a boolean on whether ``a`` is a tensor in backend package."
#~ msgstr ""

#~ msgid "a tensor to be determined"
#~ msgstr ""

#~ msgid "whether ``a`` is a tensor"
#~ msgstr ""

#~ msgid "Return the jitted version of function ``f``."
#~ msgstr ""

#~ msgid "function to be jitted"
#~ msgstr ""

#~ msgid ""
#~ "index of args that doesn't regarded "
#~ "as tensor, only work for jax "
#~ "backend"
#~ msgstr ""

#~ msgid ""
#~ "whether open XLA compilation, only works"
#~ " for tensorflow backend, defaults False "
#~ "since several ops has no XLA "
#~ "correspondence"
#~ msgstr ""

#~ msgid "jitted version of ``f``"
#~ msgstr ""

#~ msgid ""
#~ "Function that computes a (forward-mode)"
#~ " Jacobian-vector product of ``f``. "
#~ "Strictly speaking, this function is "
#~ "value_and_jvp."
#~ msgstr ""

#~ msgid "The function to compute jvp"
#~ msgstr ""

#~ msgid "input for ``f``"
#~ msgstr ""

#~ msgid "tangents"
#~ msgstr ""

#~ msgid ""
#~ "(``f(*inputs)``, jvp_tensor), where jvp_tensor "
#~ "is the same shape as the output"
#~ " of ``f``"
#~ msgstr ""

#~ msgid "Return the kronecker product of two matrices ``a`` and ``b``."
#~ msgstr ""

#~ msgid "kronecker product of ``a`` and ``b``"
#~ msgstr ""

#~ msgid "Return the maximum of an array or maximum along an axis."
#~ msgstr ""

#~ msgid "[description], defaults to None"
#~ msgstr ""

#~ msgid "Return the minimum of an array or minimum along an axis."
#~ msgstr ""

#~ msgid ""
#~ "Return the numpy array of a tensor"
#~ " ``a``, but may not work in a"
#~ " jitted function."
#~ msgstr ""

#~ msgid "numpy array of ``a``"
#~ msgstr ""

#~ msgid ""
#~ "One-hot encodes the given ``a``. "
#~ "Each index in the input ``a`` is"
#~ " encoded as a vector of zeros "
#~ "of length ``num`` with the element "
#~ "at index set to one:"
#~ msgstr ""

#~ msgid "input tensor"
#~ msgstr ""

#~ msgid "number of features in onehot dimension"
#~ msgstr ""

#~ msgid "onehot tensor with the last extra dimension"
#~ msgstr ""

#~ msgid ""
#~ "Return an ones-matrix of dimension "
#~ "`dim` Depending on specific backends, "
#~ "`dim` has to be either an int "
#~ "(numpy, torch, tensorflow) or a "
#~ "`ShapeType` object (for block-sparse "
#~ "backends). Block-sparse behavior is "
#~ "currently not supported Args:"
#~ msgstr ""

#~ msgid ""
#~ "shape (int): The dimension of the "
#~ "returned matrix. dtype: The dtype of "
#~ "the returned matrix."
#~ msgstr ""

#~ msgid ""
#~ "A jax like split API, but it "
#~ "doesn't split the key generator for "
#~ "other backends. It is just for a"
#~ " consistent interface of random code; "
#~ "make sure you know what the "
#~ "function actually does. This function is"
#~ " mainly a utility to write backend"
#~ " agnostic code instead of doing magic"
#~ " things."
#~ msgstr ""

#~ msgid "Return the elementwise real value of a tensor ``a``."
#~ msgstr ""

#~ msgid "real value of ``a``"
#~ msgstr ""

#~ msgid ""
#~ "Rectified linear unit activation function. "
#~ "Computes the element-wise function:"
#~ msgstr ""

#~ msgid "\\mathrm{relu}(x)=\\max(x,0)"
#~ msgstr ""

#~ msgid "Input tensor"
#~ msgstr ""

#~ msgid "Tensor after relu"
#~ msgstr ""

#~ msgid ""
#~ "Roughly equivalent to operand[indices] = "
#~ "updates, indices only support shape with"
#~ " rank 2 for now."
#~ msgstr ""

#~ msgid "Set the random state attached to the backend."
#~ msgstr ""

#~ msgid "the random seed, defaults to be None"
#~ msgstr ""

#~ msgid ""
#~ "If set to be true, only get "
#~ "the random state in return instead "
#~ "of setting the state on the "
#~ "backend"
#~ msgstr ""

#~ msgid "Return the  elementwise sine of a tensor ``a``."
#~ msgstr ""

#~ msgid "sine of ``a``"
#~ msgstr ""

#~ msgid "Return the total number of elements in ``a`` in tensor form."
#~ msgstr ""

#~ msgid "the total number of elements in ``a``"
#~ msgstr ""

#~ msgid ""
#~ "Softmax function. Computes the function "
#~ "which rescales elements to the range "
#~ "[0,1] such that the elements along "
#~ "axis sum to 1."
#~ msgstr ""

#~ msgid "\\mathrm{softmax}(x) = \\frac{\\exp(x_i)}{\\sum_j \\exp(x_j)}"
#~ msgstr ""

#~ msgid "Tensor"
#~ msgstr ""

#~ msgid ""
#~ "A dimension along which Softmax will "
#~ "be computed , defaults to None for"
#~ " all axis sum."
#~ msgstr ""

#~ msgid "concatenated tensor"
#~ msgstr ""

#~ msgid "Solve the linear system Ax=b and return the solution x."
#~ msgstr ""

#~ msgid "The multiplied matrix."
#~ msgstr ""

#~ msgid "The resulted matrix."
#~ msgstr ""

#~ msgid "The solution of the linear system."
#~ msgstr ""

#~ msgid "A sparse matrix multiplies a dense matrix."
#~ msgstr ""

#~ msgid "a sparse matrix"
#~ msgstr ""

#~ msgid "a dense matrix"
#~ msgstr ""

#~ msgid "dense matrix"
#~ msgstr ""

#~ msgid ""
#~ "Concatenates a sequence of tensors ``a``"
#~ " along a new dimension ``axis``."
#~ msgstr ""

#~ msgid "List of tensors in the same shape"
#~ msgstr ""

#~ msgid "the stack axis, defaults to 0"
#~ msgstr ""

#~ msgid "stateful register for each package"
#~ msgstr ""

#~ msgid "shape of output sampling tensor"
#~ msgstr ""

#~ msgid "only real data type is supported, \"32\" or \"64\", defaults to \"32\""
#~ msgstr ""

#~ msgid "Uniform random sampler from ``low`` to ``high``."
#~ msgstr ""

#~ msgid "shape of output sampling tensor, defaults to 1"
#~ msgstr ""

#~ msgid "Stop backpropagation from ``a``."
#~ msgstr ""

#~ msgid "``branches[index]()``"
#~ msgstr ""

#~ msgid "Constructs a tensor by tiling a given tensor."
#~ msgstr ""

#~ msgid "1d tensor with length the same as the rank of ``a``"
#~ msgstr ""

#~ msgid "Convert a sparse matrix to dense tensor."
#~ msgstr ""

#~ msgid "the resulted dense matrix"
#~ msgstr ""

#~ msgid ""
#~ "Find the unique elements and their "
#~ "corresponding counts of the given tensor"
#~ " ``a``."
#~ msgstr ""

#~ msgid "Unique elements, corresponding counts"
#~ msgstr ""

#~ msgid "Return the function which returns the value and grad of ``f``."
#~ msgstr ""

#~ msgid ""
#~ "the value and grad function of "
#~ "``f`` with the same set of "
#~ "arguments as ``f``"
#~ msgstr ""

#~ msgid ""
#~ "Return the VVAG function of ``f``. "
#~ "The inputs for ``f`` is (args[0], "
#~ "args[1], args[2], ...), and the output"
#~ " of ``f`` is a scalar. Suppose "
#~ "VVAG(f) is a function with inputs "
#~ "in the form (vargs[0], args[1], args[2],"
#~ " ...), where vagrs[0] has one extra"
#~ " dimension than args[0] in the first"
#~ " axis and consistent with args[0] in"
#~ " shape for remaining dimensions, i.e. "
#~ "shape(vargs[0]) = [batch] + shape(args[0])."
#~ " (We only cover cases where "
#~ "``vectorized_argnums`` defaults to 0 here "
#~ "for demonstration). VVAG(f) returns a "
#~ "tuple as a value tensor with shape"
#~ " [batch, 1] and a gradient tuple "
#~ "with shape: ([batch]+shape(args[argnum]) for "
#~ "argnum in argnums). The gradient for "
#~ "argnums=k is defined as"
#~ msgstr ""

#~ msgid ""
#~ "g^k = \\frac{\\partial \\sum_{i\\in batch} "
#~ "f(vargs[0][i], args[1], ...)}{\\partial args[k]}"
#~ msgstr ""

#~ msgid "Therefore, if argnums=0, the gradient is reduced to"
#~ msgstr ""

#~ msgid "g^0_i = \\frac{\\partial f(vargs[0][i])}{\\partial vargs[0][i]}"
#~ msgstr ""

#~ msgid ""
#~ ", which is specifically suitable for "
#~ "batched VQE optimization, where args[0] "
#~ "is the circuit parameters."
#~ msgstr ""

#~ msgid "And if argnums=1, the gradient is like"
#~ msgstr ""

#~ msgid ""
#~ "g^1_i = \\frac{\\partial \\sum_j "
#~ "f(vargs[0][j], args[1])}{\\partial args[1][i]}\n"
#~ "\n"
#~ msgstr ""

#~ msgid ""
#~ ", which is suitable for quantum "
#~ "machine learning scenarios, where ``f`` "
#~ "is the loss function, args[0] "
#~ "corresponds to the input data and "
#~ "args[1] corresponds to the weights in"
#~ " the QML model."
#~ msgstr ""

#~ msgid ""
#~ "the args to be vectorized, these "
#~ "arguments should share the same batch"
#~ " shape in the fist dimension"
#~ msgstr ""

#~ msgid ""
#~ "Function that computes the dot product"
#~ " between a vector v and the "
#~ "Jacobian of the given function at "
#~ "the point given by the inputs. "
#~ "(reverse mode AD relevant) Strictly "
#~ "speaking, this function is value_and_vjp."
#~ msgstr ""

#~ msgid "the function to carry out vjp calculation"
#~ msgstr ""

#~ msgid ""
#~ "value vector or gradient from downstream"
#~ " in reverse mode AD the same "
#~ "shape as return of function ``f``"
#~ msgstr ""

#~ msgid ""
#~ "(``f(*inputs)``, vjp_tensor), where vjp_tensor "
#~ "is the same shape as inputs"
#~ msgstr ""

#~ msgid ""
#~ "Return the vectorized map or batched "
#~ "version of ``f`` on the first "
#~ "extra axis. The general interface "
#~ "supports ``f`` with multiple arguments "
#~ "and broadcast in the fist dimension."
#~ msgstr ""

#~ msgid "function to be broadcasted."
#~ msgstr ""

#~ msgid "vmap version of ``f``"
#~ msgstr ""

#~ msgid ""
#~ "Return a zeros-matrix of dimension "
#~ "`dim` Depending on specific backends, "
#~ "`dim` has to be either an int "
#~ "(numpy, torch, tensorflow) or a "
#~ "`ShapeType` object (for block-sparse "
#~ "backends)."
#~ msgstr ""

#~ msgid "Block-sparse behavior is currently not supported Args:"
#~ msgstr ""

#~ msgid "Backend magic inherited from tensornetwork: numpy backend"
#~ msgstr ""

#~ msgid ""
#~ "Bases: "
#~ ":py:class:`tensornetwork.backends.numpy.numpy_backend.NumPyBackend`"
#~ msgstr ""

#~ msgid ""
#~ "see the original backend API at "
#~ "`numpy backend "
#~ "<https://github.com/google/TensorNetwork/blob/master/tensornetwork/backends/numpy/numpy_backend.py>`_"
#~ msgstr ""

#~ msgid "Backend magic inherited from tensornetwork: pytorch backend"
#~ msgstr ""

#~ msgid ""
#~ "Bases: "
#~ ":py:class:`tensornetwork.backends.pytorch.pytorch_backend.PyTorchBackend`"
#~ msgstr ""

#~ msgid ""
#~ "See the original backend API at "
#~ "``pytorch backend``. "
#~ "`<https://github.com/google/TensorNetwork/blob/master/tensornetwork/backends/pytorch/pytorch_backend.py>`_"
#~ msgstr ""

#~ msgid ""
#~ "Note the functionality provided by "
#~ "pytorch backend is incomplete, it "
#~ "currenly lacks native efficicent jit and"
#~ " vmap support."
#~ msgstr ""

#~ msgid "Backend magic inherited from tensornetwork: tensorflow backend"
#~ msgstr ""

#~ msgid ""
#~ "Bases: "
#~ ":py:class:`tensornetwork.backends.tensorflow.tensorflow_backend.TensorFlowBackend`"
#~ msgstr ""

#~ msgid ""
#~ "See the original backend API at "
#~ "`'tensorflow backend''. "
#~ "<https://github.com/google/TensorNetwork/blob/master/tensornetwork/backends/tensorflow/tensorflow_backend.py>`_"
#~ msgstr ""

#~ msgid "Some common noise quantum channels."
#~ msgstr ""

#~ msgid ""
#~ "Return an amplitude damping channel. "
#~ "Notice: Amplitude damping corrspondings to "
#~ "p = 1."
#~ msgstr ""

#~ msgid ""
#~ "\\sqrt{p}\n"
#~ "\\begin{bmatrix}\n"
#~ "    1 & 0\\\\\n"
#~ "    0 & \\sqrt{1-\\gamma}\\\\\n"
#~ "\\end{bmatrix}\\qquad\n"
#~ "\\sqrt{p}\n"
#~ "\\begin{bmatrix}\n"
#~ "    0 & \\sqrt{\\gamma}\\\\\n"
#~ "    0 & 0\\\\\n"
#~ "\\end{bmatrix}\\qquad\n"
#~ "\\sqrt{1-p}\n"
#~ "\\begin{bmatrix}\n"
#~ "    \\sqrt{1-\\gamma} & 0\\\\\n"
#~ "    0 & 1\\\\\n"
#~ "\\end{bmatrix}\\qquad\n"
#~ "\\sqrt{1-p}\n"
#~ "\\begin{bmatrix}\n"
#~ "    0 & 0\\\\\n"
#~ "    \\sqrt{\\gamma} & 0\\\\\n"
#~ "\\end{bmatrix}\n"
#~ "\n"
#~ msgstr ""

#~ msgid "the damping parameter of amplitude (:math:`\\gamma`)"
#~ msgstr ""

#~ msgid ":math:`p`"
#~ msgstr ""

#~ msgid "An amplitude damping channel with given :math:`\\gamma` and :math:`p`"
#~ msgstr ""

#~ msgid "Return a Depolarizing Channel"
#~ msgstr ""

#~ msgid ""
#~ "\\sqrt{1-p_x-p_y-p_z}\n"
#~ "\\begin{bmatrix}\n"
#~ "    1 & 0\\\\\n"
#~ "    0 & 1\\\\\n"
#~ "\\end{bmatrix}\\qquad\n"
#~ "\\sqrt{p_x}\n"
#~ "\\begin{bmatrix}\n"
#~ "    0 & 1\\\\\n"
#~ "    1 & 0\\\\\n"
#~ "\\end{bmatrix}\\qquad\n"
#~ "\\sqrt{p_y}\n"
#~ "\\begin{bmatrix}\n"
#~ "    0 & -1j\\\\\n"
#~ "    1j & 0\\\\\n"
#~ "\\end{bmatrix}\\qquad\n"
#~ "\\sqrt{p_z}\n"
#~ "\\begin{bmatrix}\n"
#~ "    1 & 0\\\\\n"
#~ "    0 & -1\\\\\n"
#~ "\\end{bmatrix}\n"
#~ "\n"
#~ msgstr ""

#~ msgid ":math:`p_x`"
#~ msgstr ""

#~ msgid ":math:`p_y`"
#~ msgstr ""

#~ msgid ":math:`p_z`"
#~ msgstr ""

#~ msgid "Sequences of Gates"
#~ msgstr ""

#~ msgid "Convert Kraus operators to one Tensor (as one Super Gate)."
#~ msgstr ""

#~ msgid ""
#~ "\\sum_{k}^{} K_k \\otimes K_k^{\\dagger}\n"
#~ "\n"
#~ msgstr ""

#~ msgid "A sequence of Gate"
#~ msgstr ""

#~ msgid "The corresponding Tensor of the list of Kraus operators"
#~ msgstr ""

#~ msgid "Return a phase damping channel with given :math:`\\gamma`"
#~ msgstr ""

#~ msgid ""
#~ "\\begin{bmatrix}\n"
#~ "    1 & 0\\\\\n"
#~ "    0 & \\sqrt{1-\\gamma}\\\\\n"
#~ "\\end{bmatrix}\\qquad\n"
#~ "\\begin{bmatrix}\n"
#~ "    0 & 0\\\\\n"
#~ "    0 & \\sqrt{\\gamma}\\\\\n"
#~ "\\end{bmatrix}\n"
#~ "\n"
#~ msgstr ""

#~ msgid "The damping parameter of phase (:math:`\\gamma`)"
#~ msgstr ""

#~ msgid "A phase damping channel with given :math:`\\gamma`"
#~ msgstr ""

#~ msgid "Reset channel"
#~ msgstr ""

#~ msgid ""
#~ "\\begin{bmatrix}\n"
#~ "    1 & 0\\\\\n"
#~ "    0 & 0\\\\\n"
#~ "\\end{bmatrix}\\qquad\n"
#~ "\\begin{bmatrix}\n"
#~ "    0 & 1\\\\\n"
#~ "    0 & 0\\\\\n"
#~ "\\end{bmatrix}\n"
#~ "\n"
#~ msgstr ""

#~ msgid "Check identity of a single qubit Kraus operators."
#~ msgstr ""

#~ msgid "Examples:"
#~ msgstr ""

#~ msgid ""
#~ "\\sum_{k}^{} K_k^{\\dagger} K_k = I\n"
#~ "\n"
#~ msgstr ""

#~ msgid "List of Kraus operators."
#~ msgstr ""

#~ msgid "Quantum circuit: state simulator"
#~ msgstr ""

#~ msgid "``Circuit`` class. Simple usage demo below."
#~ msgstr ""

#~ msgid "Apply any gate with parameters on the circuit."
#~ msgstr ""

#~ msgid "Qubit number than the gate applies on."
#~ msgstr ""

#~ msgid "Parameters for the gate"
#~ msgstr ""

#~ msgid "Apply cnot gate on the circuit."
#~ msgstr ""

#~ msgid ""
#~ "Qubit number than the gate applies "
#~ "on. The matrix for the gate is"
#~ "  .. math::        \\begin{bmatrix}    1.+0.j "
#~ "& 0.+0.j & 0.+0.j & 0.+0.j\\\\    "
#~ "0.+0.j & 1.+0.j & 0.+0.j & "
#~ "0.+0.j\\\\    0.+0.j & 0.+0.j & 0.+0.j"
#~ " & 1.+0.j\\\\    0.+0.j & 0.+0.j &"
#~ " 1.+0.j & 0.+0.j \\end{bmatrix}"
#~ msgstr ""

#~ msgid "Qubit number than the gate applies on. The matrix for the gate is"
#~ msgstr ""

#~ msgid ""
#~ "\\begin{bmatrix}    1.+0.j & 0.+0.j & "
#~ "0.+0.j & 0.+0.j\\\\    0.+0.j & 1.+0.j"
#~ " & 0.+0.j & 0.+0.j\\\\    0.+0.j &"
#~ " 0.+0.j & 0.+0.j & 1.+0.j\\\\    "
#~ "0.+0.j & 0.+0.j & 1.+0.j & 0.+0.j"
#~ " \\end{bmatrix}"
#~ msgstr ""

#~ msgid "Apply cr gate with parameters on the circuit."
#~ msgstr ""

#~ msgid "Apply crx gate with parameters on the circuit."
#~ msgstr ""

#~ msgid "Apply cry gate with parameters on the circuit."
#~ msgstr ""

#~ msgid "Apply crz gate with parameters on the circuit."
#~ msgstr ""

#~ msgid "Apply cy gate on the circuit."
#~ msgstr ""

#~ msgid ""
#~ "Qubit number than the gate applies "
#~ "on. The matrix for the gate is"
#~ "  .. math::        \\begin{bmatrix}    1.+0.j "
#~ "& 0.+0.j & 0.+0.j & 0.+0.j\\\\    "
#~ "0.+0.j & 1.+0.j & 0.+0.j & "
#~ "0.+0.j\\\\    0.+0.j & 0.+0.j & 0.+0.j"
#~ " & 0.-1.j\\\\    0.+0.j & 0.+0.j &"
#~ " 0.+1.j & 0.+0.j \\end{bmatrix}"
#~ msgstr ""

#~ msgid ""
#~ "\\begin{bmatrix}    1.+0.j & 0.+0.j & "
#~ "0.+0.j & 0.+0.j\\\\    0.+0.j & 1.+0.j"
#~ " & 0.+0.j & 0.+0.j\\\\    0.+0.j &"
#~ " 0.+0.j & 0.+0.j & 0.-1.j\\\\    "
#~ "0.+0.j & 0.+0.j & 0.+1.j & 0.+0.j"
#~ " \\end{bmatrix}"
#~ msgstr ""

#~ msgid "Apply cz gate on the circuit."
#~ msgstr ""

#~ msgid ""
#~ "Qubit number than the gate applies "
#~ "on. The matrix for the gate is"
#~ "  .. math::        \\begin{bmatrix}    1.+0.j "
#~ "& 0.+0.j & 0.+0.j & 0.+0.j\\\\    "
#~ "0.+0.j & 1.+0.j & 0.+0.j & "
#~ "0.+0.j\\\\    0.+0.j & 0.+0.j & 1.+0.j"
#~ " & 0.+0.j\\\\    0.+0.j & 0.+0.j &"
#~ " 0.+0.j & -1.+0.j \\end{bmatrix}"
#~ msgstr ""

#~ msgid ""
#~ "\\begin{bmatrix}    1.+0.j & 0.+0.j & "
#~ "0.+0.j & 0.+0.j\\\\    0.+0.j & 1.+0.j"
#~ " & 0.+0.j & 0.+0.j\\\\    0.+0.j &"
#~ " 0.+0.j & 1.+0.j & 0.+0.j\\\\    "
#~ "0.+0.j & 0.+0.j & 0.+0.j & -1.+0.j"
#~ " \\end{bmatrix}"
#~ msgstr ""

#~ msgid "Apply exp gate with parameters on the circuit."
#~ msgstr ""

#~ msgid "Apply exp1 gate with parameters on the circuit."
#~ msgstr ""

#~ msgid "Apply h gate on the circuit."
#~ msgstr ""

#~ msgid ""
#~ "Qubit number than the gate applies "
#~ "on. The matrix for the gate is"
#~ "  .. math::        \\begin{bmatrix}    "
#~ "0.70710677+0.j & 0.70710677+0.j\\\\    "
#~ "0.70710677+0.j & -0.70710677+0.j \\end{bmatrix}"
#~ msgstr ""

#~ msgid ""
#~ "\\begin{bmatrix}    0.70710677+0.j & "
#~ "0.70710677+0.j\\\\    0.70710677+0.j & "
#~ "-0.70710677+0.j \\end{bmatrix}"
#~ msgstr ""

#~ msgid "Apply i gate on the circuit."
#~ msgstr ""

#~ msgid ""
#~ "Qubit number than the gate applies "
#~ "on. The matrix for the gate is"
#~ "  .. math::        \\begin{bmatrix}    1.+0.j "
#~ "& 0.+0.j\\\\    0.+0.j & 1.+0.j "
#~ "\\end{bmatrix}"
#~ msgstr ""

#~ msgid ""
#~ "\\begin{bmatrix}    1.+0.j & 0.+0.j\\\\    "
#~ "0.+0.j & 1.+0.j \\end{bmatrix}"
#~ msgstr ""

#~ msgid "Apply iswap gate on the circuit."
#~ msgstr ""

#~ msgid ""
#~ "Qubit number than the gate applies "
#~ "on. The matrix for the gate is"
#~ "  .. math::        \\begin{bmatrix}    1.+0.j "
#~ "& 0.+0.j & 0.+0.j & 0.+0.j\\\\    "
#~ "0.+0.j & 0.+0.j & 0.+1.j & "
#~ "0.+0.j\\\\    0.+0.j & 0.+1.j & 0.+0.j"
#~ " & 0.+0.j\\\\    0.+0.j & 0.+0.j &"
#~ " 0.+0.j & 1.+0.j \\end{bmatrix}"
#~ msgstr ""

#~ msgid ""
#~ "\\begin{bmatrix}    1.+0.j & 0.+0.j & "
#~ "0.+0.j & 0.+0.j\\\\    0.+0.j & 0.+0.j"
#~ " & 0.+1.j & 0.+0.j\\\\    0.+0.j &"
#~ " 0.+1.j & 0.+0.j & 0.+0.j\\\\    "
#~ "0.+0.j & 0.+0.j & 0.+0.j & 1.+0.j"
#~ " \\end{bmatrix}"
#~ msgstr ""

#~ msgid "Apply r gate with parameters on the circuit."
#~ msgstr ""

#~ msgid "Apply rx gate with parameters on the circuit."
#~ msgstr ""

#~ msgid "Apply ry gate with parameters on the circuit."
#~ msgstr ""

#~ msgid "Apply rz gate with parameters on the circuit."
#~ msgstr ""

#~ msgid "Apply s gate on the circuit."
#~ msgstr ""

#~ msgid ""
#~ "Qubit number than the gate applies "
#~ "on. The matrix for the gate is"
#~ "  .. math::        \\begin{bmatrix}    1.+0.j "
#~ "& 0.+0.j\\\\    0.+0.j & 0.+1.j "
#~ "\\end{bmatrix}"
#~ msgstr ""

#~ msgid ""
#~ "\\begin{bmatrix}    1.+0.j & 0.+0.j\\\\    "
#~ "0.+0.j & 0.+1.j \\end{bmatrix}"
#~ msgstr ""

#~ msgid "Apply sd gate on the circuit."
#~ msgstr ""

#~ msgid ""
#~ "Qubit number than the gate applies "
#~ "on. The matrix for the gate is"
#~ "  .. math::        \\begin{bmatrix}    1.+0.j "
#~ "& 0.+0.j\\\\    0.+0.j & 0.-1.j "
#~ "\\end{bmatrix}"
#~ msgstr ""

#~ msgid ""
#~ "\\begin{bmatrix}    1.+0.j & 0.+0.j\\\\    "
#~ "0.+0.j & 0.-1.j \\end{bmatrix}"
#~ msgstr ""

#~ msgid "Apply swap gate on the circuit."
#~ msgstr ""

#~ msgid ""
#~ "Qubit number than the gate applies "
#~ "on. The matrix for the gate is"
#~ "  .. math::        \\begin{bmatrix}    1.+0.j "
#~ "& 0.+0.j & 0.+0.j & 0.+0.j\\\\    "
#~ "0.+0.j & 0.+0.j & 1.+0.j & "
#~ "0.+0.j\\\\    0.+0.j & 1.+0.j & 0.+0.j"
#~ " & 0.+0.j\\\\    0.+0.j & 0.+0.j &"
#~ " 0.+0.j & 1.+0.j \\end{bmatrix}"
#~ msgstr ""

#~ msgid ""
#~ "\\begin{bmatrix}    1.+0.j & 0.+0.j & "
#~ "0.+0.j & 0.+0.j\\\\    0.+0.j & 0.+0.j"
#~ " & 1.+0.j & 0.+0.j\\\\    0.+0.j &"
#~ " 1.+0.j & 0.+0.j & 0.+0.j\\\\    "
#~ "0.+0.j & 0.+0.j & 0.+0.j & 1.+0.j"
#~ " \\end{bmatrix}"
#~ msgstr ""

#~ msgid "Apply t gate on the circuit."
#~ msgstr ""

#~ msgid ""
#~ "Qubit number than the gate applies "
#~ "on. The matrix for the gate is"
#~ "  .. math::        \\begin{bmatrix}    1. &"
#~ " +0.j & 0. & +0.j\\\\    0. &"
#~ " +0.j & 0.70710677+0.70710677j \\end{bmatrix}"
#~ msgstr ""

#~ msgid ""
#~ "\\begin{bmatrix}    1. & +0.j & 0. "
#~ "& +0.j\\\\    0. & +0.j & "
#~ "0.70710677+0.70710677j \\end{bmatrix}"
#~ msgstr ""

#~ msgid "Apply td gate on the circuit."
#~ msgstr ""

#~ msgid ""
#~ "Qubit number than the gate applies "
#~ "on. The matrix for the gate is"
#~ "  .. math::        \\begin{bmatrix}    1. &"
#~ " +0.j & 0. & +0.j\\\\    0. &"
#~ " +0.j & 0.70710677-0.70710677j \\end{bmatrix}"
#~ msgstr ""

#~ msgid ""
#~ "\\begin{bmatrix}    1. & +0.j & 0. "
#~ "& +0.j\\\\    0. & +0.j & "
#~ "0.70710677-0.70710677j \\end{bmatrix}"
#~ msgstr ""

#~ msgid "Apply toffoli gate on the circuit."
#~ msgstr ""

#~ msgid ""
#~ "Qubit number than the gate applies "
#~ "on. The matrix for the gate is"
#~ "  .. math::        \\begin{bmatrix}    1.+0.j "
#~ "& 0.+0.j & 0.+0.j & 0.+0.j & "
#~ "0.+0.j & 0.+0.j & 0.+0.j & "
#~ "0.+0.j\\\\    0.+0.j & 1.+0.j & 0.+0.j"
#~ " & 0.+0.j & 0.+0.j & 0.+0.j &"
#~ " 0.+0.j & 0.+0.j\\\\    0.+0.j & "
#~ "0.+0.j & 1.+0.j & 0.+0.j & 0.+0.j"
#~ " & 0.+0.j & 0.+0.j & 0.+0.j\\\\"
#~ "    0.+0.j & 0.+0.j & 0.+0.j & "
#~ "1.+0.j & 0.+0.j & 0.+0.j & 0.+0.j"
#~ " & 0.+0.j\\\\    0.+0.j & 0.+0.j &"
#~ " 0.+0.j & 0.+0.j & 1.+0.j & "
#~ "0.+0.j & 0.+0.j & 0.+0.j\\\\    0.+0.j"
#~ " & 0.+0.j & 0.+0.j & 0.+0.j &"
#~ " 0.+0.j & 1.+0.j & 0.+0.j & "
#~ "0.+0.j\\\\    0.+0.j & 0.+0.j & 0.+0.j"
#~ " & 0.+0.j & 0.+0.j & 0.+0.j &"
#~ " 0.+0.j & 1.+0.j\\\\    0.+0.j & "
#~ "0.+0.j & 0.+0.j & 0.+0.j & 0.+0.j"
#~ " & 0.+0.j & 1.+0.j & 0.+0.j "
#~ "\\end{bmatrix}"
#~ msgstr ""

#~ msgid ""
#~ "\\begin{bmatrix}    1.+0.j & 0.+0.j & "
#~ "0.+0.j & 0.+0.j & 0.+0.j & 0.+0.j"
#~ " & 0.+0.j & 0.+0.j\\\\    0.+0.j &"
#~ " 1.+0.j & 0.+0.j & 0.+0.j & "
#~ "0.+0.j & 0.+0.j & 0.+0.j & "
#~ "0.+0.j\\\\    0.+0.j & 0.+0.j & 1.+0.j"
#~ " & 0.+0.j & 0.+0.j & 0.+0.j &"
#~ " 0.+0.j & 0.+0.j\\\\    0.+0.j & "
#~ "0.+0.j & 0.+0.j & 1.+0.j & 0.+0.j"
#~ " & 0.+0.j & 0.+0.j & 0.+0.j\\\\"
#~ "    0.+0.j & 0.+0.j & 0.+0.j & "
#~ "0.+0.j & 1.+0.j & 0.+0.j & 0.+0.j"
#~ " & 0.+0.j\\\\    0.+0.j & 0.+0.j &"
#~ " 0.+0.j & 0.+0.j & 0.+0.j & "
#~ "1.+0.j & 0.+0.j & 0.+0.j\\\\    0.+0.j"
#~ " & 0.+0.j & 0.+0.j & 0.+0.j &"
#~ " 0.+0.j & 0.+0.j & 0.+0.j & "
#~ "1.+0.j\\\\    0.+0.j & 0.+0.j & 0.+0.j"
#~ " & 0.+0.j & 0.+0.j & 0.+0.j &"
#~ " 1.+0.j & 0.+0.j \\end{bmatrix}"
#~ msgstr ""

#~ msgid "Apply wroot gate on the circuit."
#~ msgstr ""

#~ msgid ""
#~ "Qubit number than the gate applies "
#~ "on. The matrix for the gate is"
#~ "  .. math::        \\begin{bmatrix}    "
#~ "0.70710677+0.j & -0.5 & -0.5j\\\\    0.5"
#~ " & -0.5j & 0.70710677+0.j \\end{bmatrix}"
#~ msgstr ""

#~ msgid ""
#~ "\\begin{bmatrix}    0.70710677+0.j & -0.5 &"
#~ " -0.5j\\\\    0.5 & -0.5j & "
#~ "0.70710677+0.j \\end{bmatrix}"
#~ msgstr ""

#~ msgid "Apply x gate on the circuit."
#~ msgstr ""

#~ msgid ""
#~ "Qubit number than the gate applies "
#~ "on. The matrix for the gate is"
#~ "  .. math::        \\begin{bmatrix}    0.+0.j "
#~ "& 1.+0.j\\\\    1.+0.j & 0.+0.j "
#~ "\\end{bmatrix}"
#~ msgstr ""

#~ msgid ""
#~ "\\begin{bmatrix}    0.+0.j & 1.+0.j\\\\    "
#~ "1.+0.j & 0.+0.j \\end{bmatrix}"
#~ msgstr ""

#~ msgid "Apply y gate on the circuit."
#~ msgstr ""

#~ msgid ""
#~ "Qubit number than the gate applies "
#~ "on. The matrix for the gate is"
#~ "  .. math::        \\begin{bmatrix}    0.+0.j "
#~ "& 0.-1.j\\\\    0.+1.j & 0.+0.j "
#~ "\\end{bmatrix}"
#~ msgstr ""

#~ msgid ""
#~ "\\begin{bmatrix}    0.+0.j & 0.-1.j\\\\    "
#~ "0.+1.j & 0.+0.j \\end{bmatrix}"
#~ msgstr ""

#~ msgid "Apply z gate on the circuit."
#~ msgstr ""

#~ msgid ""
#~ "Qubit number than the gate applies "
#~ "on. The matrix for the gate is"
#~ "  .. math::        \\begin{bmatrix}    1.+0.j "
#~ "& 0.+0.j\\\\    0.+0.j & -1.+0.j "
#~ "\\end{bmatrix}"
#~ msgstr ""

#~ msgid ""
#~ "\\begin{bmatrix}    1.+0.j & 0.+0.j\\\\    "
#~ "0.+0.j & -1.+0.j \\end{bmatrix}"
#~ msgstr ""

#~ msgid "Circuit object based on state simulator."
#~ msgstr ""

#~ msgid "The number of qubits in the circuit."
#~ msgstr ""

#~ msgid ""
#~ "If not None, the initial state of"
#~ " the circuit is taken as ``inputs``"
#~ " instead of :math:`\\vert 0\\rangle^n` "
#~ "qubits, defaults to None"
#~ msgstr ""

#~ msgid "(Nodes, dangling Edges) for a MPS like initial wavefunction"
#~ msgstr ""

#~ msgid ""
#~ "dict if two qubit gate is ready"
#~ " for split, including parameters for "
#~ "at least one of ``max_singular_values`` "
#~ "and ``max_truncation_err``."
#~ msgstr ""

#~ msgid ""
#~ "Monte Carlo trajectory simulation of "
#~ "general Kraus channel whose Kraus "
#~ "operators cannot be amplified to unitary"
#~ " operators. For unitary operators composed"
#~ " Kraus channel, :py:meth:`unitary_kraus` is "
#~ "much faster."
#~ msgstr ""

#~ msgid ""
#~ "This function is jittable in theory. "
#~ "But only jax+GPU combination is "
#~ "recommended for jit since the graph "
#~ "building time is too long for "
#~ "other backend options; though the "
#~ "running time of the function is "
#~ "very fast for every case."
#~ msgstr ""

#~ msgid "list of ``tn.Node`` for Kraus operators"
#~ msgstr ""

#~ msgid "the qubits index that Kraus channel is applied on"
#~ msgstr ""

#~ msgid ""
#~ "random tensor between 0 or 1, "
#~ "defaults to be None, the random "
#~ "number will be generated automatically"
#~ msgstr ""

#~ msgid "Compute the expectation of corresponding operators."
#~ msgstr ""

#~ msgid ""
#~ "operator and its position on the "
#~ "circuit, eg. ``(tc.gates.z(), [1, ]), "
#~ "(tc.gates.x(), [2, ])`` is for operator"
#~ " :math:`Z_1X_2`"
#~ msgstr ""

#~ msgid ""
#~ "if True, then the wavefunction tensor"
#~ " is cached for further expectation "
#~ "evaluation, defaults to be true"
#~ msgstr ""

#~ msgid "Tensor with one element"
#~ msgstr ""

#~ msgid "[WIP], check whether the circuit is legal."
#~ msgstr ""

#~ msgid "the bool indicating whether the circuit is legal"
#~ msgstr ""

#~ msgid "Take measurement to the given quantum lines."
#~ msgstr ""

#~ msgid "measure on which quantum line"
#~ msgstr ""

#~ msgid "if true, theoretical probability is also returned"
#~ msgstr ""

#~ msgid ""
#~ "Middle measurement in z-basis on the "
#~ "circuit, note the wavefunction output is"
#~ " not normalized with ``mid_measurement`` "
#~ "involved, one should normalize the state"
#~ " manually if needed."
#~ msgstr ""

#~ msgid "the index of qubit that the Z direction postselection applied on"
#~ msgstr ""

#~ msgid "0 for spin up, 1 for spin down, defaults to be 0"
#~ msgstr ""

#~ msgid "Reference: arXiv:1201.3974."
#~ msgstr ""

#~ msgid "sampled bit string and the corresponding theoretical probability"
#~ msgstr ""

#~ msgid "Replace the input state with the circuit structure unchanged."
#~ msgstr ""

#~ msgid "Input wavefunction."
#~ msgstr ""

#~ msgid ""
#~ "Replace the input state in MPS "
#~ "representation while keep the circuit "
#~ "structure unchanged."
#~ msgstr ""

#~ msgid "Compute the output wavefunction from the circuit."
#~ msgstr ""

#~ msgid "the str indicating the form of the output wavefunction"
#~ msgstr ""

#~ msgid "Tensor with the corresponding shape"
#~ msgstr ""

#~ msgid "Compute :math:`\\langle bra\\vert ops \\vert ket\\rangle`"
#~ msgstr ""

#~ msgid "Example 1 (:math:`bra` is same as :math:`ket`)"
#~ msgstr ""

#~ msgid "Example 2 (:math:`bra` is different from :math:`ket`)"
#~ msgstr ""

#~ msgid "[description], defaults to None, which is the same as ``ket``"
#~ msgstr ""

#~ msgid "[description], defaults to True"
#~ msgstr ""

#~ msgid "[description], defaults to False"
#~ msgstr ""

#~ msgid ""
#~ "Not an ideal visualization for quantum"
#~ " circuit, but reserve here as a "
#~ "general approch to show tensornetwork "
#~ "[Deperacted, use ``qir2tex instead``]"
#~ msgstr ""

#~ msgid "Constants and setups"
#~ msgstr ""

#~ msgid ""
#~ "To set runtime contractor of the "
#~ "tensornetwork for a better contraction "
#~ "path."
#~ msgstr ""

#~ msgid ""
#~ "\"auto\", \"greedy\", \"branch\", \"plain\", "
#~ "\"tng\", \"custom\", \"custom_stateful\". defaults"
#~ " to None (\"auto\")"
#~ msgstr ""

#~ msgid "Valid for \"custom\" or \"custom_stateful\" as method, defaults to None"
#~ msgstr ""

#~ msgid ""
#~ "It is not very useful, as "
#~ "``memory_limit`` leads to ``branch`` "
#~ "contraction instead of ``greedy`` which "
#~ "is rather slow, defaults to None"
#~ msgstr ""

#~ msgid "Tensornetwork version is too low to support some of the contractors."
#~ msgstr ""

#~ msgid "Unknown method options."
#~ msgstr ""

#~ msgid "The new tensornetwork with its contractor set."
#~ msgstr ""

#~ msgid "To set the runtime numerical dtype of tensors."
#~ msgstr ""

#~ msgid ""
#~ "\"complex64\" or \"complex128\", defaults to"
#~ " None, which is equivalent to "
#~ "\"complex64\"."
#~ msgstr ""

#~ msgid "The naive state-vector simulator contraction path."
#~ msgstr ""

#~ msgid "The list of ``tn.Node``."
#~ msgstr ""

#~ msgid "The list of dangling node edges, defaults to be None."
#~ msgstr ""

#~ msgid "The ``tn.Node`` after contraction"
#~ msgstr ""

#~ msgid "To set the runtime backend of tensorcircuit."
#~ msgstr ""

#~ msgid ""
#~ "Note: ``tc.set_backend`` and "
#~ "``tc.cons.set_tensornetwork_backend`` are the same."
#~ msgstr ""

#~ msgid ""
#~ "\"numpy\", \"tensorflow\", \"jax\", \"pytorch\". "
#~ "defaults to None, which gives the "
#~ "same behavior as "
#~ "``tensornetwork.backend_contextmanager.get_default_backend()``."
#~ msgstr ""

#~ msgid "Whether the object should be set as global."
#~ msgstr ""

#~ msgid "Quantum circuit class but with density matrix simulator"
#~ msgstr ""

#~ msgid "Quantum circuit class but with density matrix simulator: v2"
#~ msgstr ""

#~ msgid "Bases: :py:class:`tensorcircuit.densitymatrix.DMCircuit`"
#~ msgstr ""

#~ msgid "Experimental features"
#~ msgstr ""

#~ msgid ""
#~ "Declarations of single-qubit and two-"
#~ "qubit gates and their corresponding "
#~ "matrix."
#~ msgstr ""

#~ msgid "Bases: :py:class:`tensornetwork.network_components.Node`"
#~ msgstr ""

#~ msgid "Wrapper of tn.Node, quantum gate"
#~ msgstr ""

#~ msgid "Bases: :py:class:`tensorcircuit.gates.GateF`"
#~ msgstr ""

#~ msgid "Note one should provide the gate with properly reshaped."
#~ msgstr ""

#~ msgid "corresponding gate"
#~ msgstr ""

#~ msgid "The name of the gate."
#~ msgstr ""

#~ msgid "the resulted gate"
#~ msgstr ""

#~ msgid "Convert the inputs to Tensor with specified dtype."
#~ msgstr ""

#~ msgid "inputs"
#~ msgstr ""

#~ msgid "dtype of the output Tensors"
#~ msgstr ""

#~ msgid "List of Tensors"
#~ msgstr ""

#~ msgid "Returns a LaTeX bmatrix."
#~ msgstr ""

#~ msgid "Formatted Display:"
#~ msgstr ""

#~ msgid ""
#~ "\\begin{bmatrix}    1.+0.j & 0.+0.j\\\\    "
#~ "0.+0.j & 1.+0.j \\end{bmatrix}\n"
#~ "\n"
#~ msgstr ""

#~ msgid "2D numpy array"
#~ msgstr ""

#~ msgid "ValueError(\"bmatrix can at most display two dimensions\")"
#~ msgstr ""

#~ msgid "latex str for bmatrix of array a"
#~ msgstr ""

#~ msgid ""
#~ "Controlled rotation gate, when the "
#~ "control bit is 1, `rgate` is "
#~ "applied on the target gate."
#~ msgstr ""

#~ msgid "angle in radians"
#~ msgstr ""

#~ msgid "CR Gate"
#~ msgstr ""

#~ msgid ""
#~ "Faster exponential gate, directly implemented"
#~ " based on RHS, only work when: "
#~ ":math:`U^2` is identity matrix."
#~ msgstr ""

#~ msgid ""
#~ "\\rm{exp}(U) &= e^{-i \\theta U} \\\\\n"
#~ "        &= \\cos(\\theta) I - j \\sin(\\theta) U \\\\\n"
#~ "\n"
#~ msgstr ""

#~ msgid "input unitary (U)"
#~ msgstr ""

#~ msgid "suffix of Gate name"
#~ msgstr ""

#~ msgid "Exponential Gate"
#~ msgstr ""

#~ msgid "Exponential gate."
#~ msgstr ""

#~ msgid ""
#~ "\\rm{exp}(U) = e^{-i \\theta U}\n"
#~ "\n"
#~ msgstr ""

#~ msgid "iSwap gate."
#~ msgstr ""

#~ msgid ""
#~ "iSwap(\\theta) =\n"
#~ "\\begin{pmatrix}\n"
#~ "    1 & 0 & 0 & 0\\\\\n"
#~ "    0 & \\cos(\\frac{\\pi}{2} \\theta )"
#~ " & j \\sin(\\frac{\\pi}{2} \\theta ) "
#~ "& 0\\\\\n"
#~ "    0 & j \\sin(\\frac{\\pi}{2} \\theta"
#~ " ) & \\cos(\\frac{\\pi}{2} \\theta ) "
#~ "& 0\\\\\n"
#~ "    0 & 0 & 0 & 1\\\\\n"
#~ "\\end{pmatrix}\n"
#~ "\n"
#~ msgstr ""

#~ msgid "iSwap Gate"
#~ msgstr ""

#~ msgid "Convert Gate to numpy array."
#~ msgstr ""

#~ msgid "input Gate"
#~ msgstr ""

#~ msgid "corresponding Tensor"
#~ msgstr ""

#~ msgid ""
#~ "Inner helper function to generate gate"
#~ " functions, such as ``z()`` from "
#~ "``_z_matrix``"
#~ msgstr ""

#~ msgid "General single qubit rotation gate"
#~ msgstr ""

#~ msgid ""
#~ "R(\\theta, \\phi, \\alpha) = i \\cos(\\theta) I\n"
#~ "\n"
#~ msgstr ""

#~ msgid ""
#~ "- i \\cos(\\phi) \\sin(\\alpha) \\sin(\\theta) X\n"
#~ "\n"
#~ msgstr ""

#~ msgid ""
#~ "- i \\sin(\\phi) \\sin(\\alpha) \\sin(\\theta) Y\n"
#~ "\n"
#~ msgstr ""

#~ msgid ""
#~ "- i \\sin(\\theta) \\cos(\\alpha) Z\n"
#~ "\n"
#~ msgstr ""

#~ msgid "R Gate"
#~ msgstr ""

#~ msgid "Random single qubit gate described in https://arxiv.org/abs/2002.07730."
#~ msgstr ""

#~ msgid "A random single qubit gate"
#~ msgstr ""

#~ msgid "Returns a random two-qubit gate."
#~ msgstr ""

#~ msgid "a random two-qubit gate"
#~ msgstr ""

#~ msgid ""
#~ "Rotation gate, which is in matrix "
#~ "exponential form, shall give the same"
#~ " result as `rgate`."
#~ msgstr ""

#~ msgid ""
#~ "mx = \\sin(\\alpha) \\cos(\\phi) X\n"
#~ "\n"
#~ msgstr ""

#~ msgid ""
#~ "my = \\sin(\\alpha) \\sin(\\phi) Y\n"
#~ "\n"
#~ msgstr ""

#~ msgid ""
#~ "mz = \\cos(\\alpha) Z\n"
#~ "\n"
#~ msgstr ""

#~ msgid ""
#~ "R(\\theta, \\alpha, \\phi) = e^{-i\\theta (mx+my+mz)}\n"
#~ "\n"
#~ msgstr ""

#~ msgid "Rotation Gate"
#~ msgstr ""

#~ msgid "Rotation gate along X axis."
#~ msgstr ""

#~ msgid ""
#~ "RX(\\theta) = e^{-i\\frac{\\theta}{2}X}\n"
#~ "\n"
#~ msgstr ""

#~ msgid "RX Gate"
#~ msgstr ""

#~ msgid "Rotation gate along Y axis."
#~ msgstr ""

#~ msgid ""
#~ "RY(\\theta) = e^{-i\\frac{\\theta}{2}Y}\n"
#~ "\n"
#~ msgstr ""

#~ msgid "RY Gate"
#~ msgstr ""

#~ msgid "Rotation gate along Z axis."
#~ msgstr ""

#~ msgid ""
#~ "RZ(\\theta) = e^{-i\\frac{\\theta}{2}Z}\n"
#~ "\n"
#~ msgstr ""

#~ msgid "RZ Gate"
#~ msgstr ""

#~ msgid "Interfaces bridging different backends"
#~ msgstr ""

#~ msgid "Keras layer for tc quantum function"
#~ msgstr ""

#~ msgid ""
#~ "`QuantumLayer` wraps the quantum function "
#~ "`f` as a `keras.Layer` so that "
#~ "tensorcircuit is better integrated with "
#~ "tensorflow."
#~ msgstr ""

#~ msgid "[description], defaults to \"glorot_uniform\""
#~ msgstr ""

#~ msgid ""
#~ "Load function from the files in "
#~ "the ``tf.savedmodel`` format. We can "
#~ "load several functions at the same "
#~ "time, as they can be the same "
#~ "function of different input shapes."
#~ msgstr ""

#~ msgid ""
#~ "The fallback function when all functions"
#~ " loaded are failed, defaults to None"
#~ msgstr ""

#~ msgid ""
#~ "When there is not legal loaded "
#~ "function of the input shape and no"
#~ " fallback callable."
#~ msgstr ""

#~ msgid ""
#~ "A function that tries all loaded "
#~ "function against the input until the "
#~ "first success one."
#~ msgstr ""

#~ msgid ""
#~ "The keras loss function that directly"
#~ " taking the model output as the "
#~ "loss."
#~ msgstr ""

#~ msgid "Save tf function in the file (``tf.savedmodel`` format)."
#~ msgstr ""

#~ msgid "``tf.function`` ed function with graph building"
#~ msgstr ""

#~ msgid "the dir path to save the function"
#~ msgstr ""

#~ msgid "FiniteMPS from tensornetwork with bug fixed"
#~ msgstr ""

#~ msgid ""
#~ "Bases: "
#~ ":py:class:`tensornetwork.matrixproductstates.finite_mps.FiniteMPS`"
#~ msgstr ""

#~ msgid ""
#~ "Apply a two-site gate to an "
#~ "MPS. This routine will in general "
#~ "destroy any canonical form of the "
#~ "state. If a canonical form is "
#~ "needed, the user can restore it "
#~ "using `FiniteMPS.position`."
#~ msgstr ""

#~ msgid "A two-body gate."
#~ msgstr ""

#~ msgid "The first site where the gate acts."
#~ msgstr ""

#~ msgid "The second site where the gate acts."
#~ msgstr ""

#~ msgid "The maximum number of singular values to keep."
#~ msgstr ""

#~ msgid "The maximum allowed truncation error."
#~ msgstr ""

#~ msgid ""
#~ "An optional value to choose the "
#~ "MPS tensor at `center_position` to be"
#~ " isometric after the application of "
#~ "the gate. Defaults to `site1`. If "
#~ "the MPS is canonical "
#~ "(i.e.`BaseMPS.center_position != None`), and "
#~ "if the orthogonality center coincides "
#~ "with either `site1` or `site2`,  the "
#~ "orthogonality center will be shifted to"
#~ " `center_position` (`site1` by default). If"
#~ " the orthogonality center does not "
#~ "coincide with `(site1, site2)` then "
#~ "`MPS.center_position` is set to `None`."
#~ msgstr ""

#~ msgid "Multiply `max_truncation_err` with the largest singular value."
#~ msgstr ""

#~ msgid ""
#~ "\"rank of gate is {} but has "
#~ "to be 4\", \"site1 = {} is "
#~ "not between 0 <= site < N -"
#~ " 1 = {}\", \"site2 = {} is "
#~ "not between 1 <= site < N ="
#~ " {}\",\"Found site2 ={}, site1={}. Only "
#~ "nearest neighbor gates are currently "
#~ "supported\", \"f center_position = "
#~ "{center_position} not  f in {(site1, "
#~ "site2)} \", or \"center_position = {},"
#~ " but gate is applied at sites "
#~ "{}, {}. Truncation should only be "
#~ "done if the gate is applied at "
#~ "the center position of the MPS.\""
#~ msgstr ""

#~ msgid "A scalar tensor containing the truncated weight of the truncation."
#~ msgstr ""

#~ msgid "Measure the expectation value of local operators `ops` site `sites`."
#~ msgstr ""

#~ msgid "A list Tensors of rank 2; the local operators to be measured."
#~ msgstr ""

#~ msgid "Sites where `ops` act."
#~ msgstr ""

#~ msgid "measurements :math:`\\langle` `ops[n]`:math:`\\rangle` for n in `sites`"
#~ msgstr ""

#~ msgid ""
#~ "Compute the correlator :math:`\\langle` "
#~ "`op1[site1], op2[s]`:math:`\\rangle` between `site1`"
#~ " and all sites `s` in `sites2`. "
#~ "If `s == site1`, `op2[s]` will be"
#~ " applied first."
#~ msgstr ""

#~ msgid "Tensor of rank 2; the local operator at `site1`."
#~ msgstr ""

#~ msgid "Tensor of rank 2; the local operator at `sites2`."
#~ msgstr ""

#~ msgid "The site where `op1`  acts"
#~ msgstr ""

#~ msgid "Sites where operator `op2` acts."
#~ msgstr ""

#~ msgid ""
#~ "Correlator :math:`\\langle` `op1[site1], "
#~ "op2[s]`:math:`\\rangle` for `s` :math:`\\in` "
#~ "`sites2`."
#~ msgstr ""

#~ msgid "Quantum circuit: MPS state simulator"
#~ msgstr ""

#~ msgid "``MPSCircuit`` class. Simple usage demo below."
#~ msgstr ""

#~ msgid "MPSCircuit object based on state simulator."
#~ msgstr ""

#~ msgid ""
#~ "If not None, the initial state of"
#~ " the circuit is taken as ``tensors``"
#~ " instead of :math:`\\vert 0\\rangle^n` "
#~ "qubits, defaults to None"
#~ msgstr ""

#~ msgid "The center position of MPS, default to 0"
#~ msgstr ""

#~ msgid "Apply a general qubit gate on MPS."
#~ msgstr ""

#~ msgid "The Gate to be applied"
#~ msgstr ""

#~ msgid "Qubit indices of the gate"
#~ msgstr ""

#~ msgid "\"MPS does not support application of gate on > 2 qubits.\""
#~ msgstr ""

#~ msgid ""
#~ "Apply a double qubit gate on "
#~ "adjacent qubits of Matrix Product States"
#~ " (MPS). Truncation rule is specified "
#~ "by `set_truncation_rule`."
#~ msgstr ""

#~ msgid "The first qubit index of the gate"
#~ msgstr ""

#~ msgid "The second qubit index of the gate"
#~ msgstr ""

#~ msgid "Center position of MPS, default is None"
#~ msgstr ""

#~ msgid ""
#~ "Apply a double qubit gate on MPS."
#~ " Truncation rule is specified by "
#~ "`set_truncation_rule`."
#~ msgstr ""

#~ msgid ""
#~ "Apply a single qubit gate on MPS,"
#~ " and the gate must be unitary; "
#~ "no truncation is needed."
#~ msgstr ""

#~ msgid "gate to be applied"
#~ msgstr ""

#~ msgid "Qubit index of the gate"
#~ msgstr ""

#~ msgid "Compute the conjugate of the current MPS."
#~ msgstr ""

#~ msgid "The constructed MPS"
#~ msgstr ""

#~ msgid "Copy the current MPS."
#~ msgstr ""

#~ msgid "Copy the current MPS without the tensors."
#~ msgstr ""

#~ msgid "Compute the expectation of the corresponding double qubit gate."
#~ msgstr ""

#~ msgid "qubit index of the gate"
#~ msgstr ""

#~ msgid ""
#~ "Compute the expectation of the "
#~ "corresponding single qubit gate in the"
#~ " form of tensor."
#~ msgstr ""

#~ msgid "Gate to be applied"
#~ msgstr ""

#~ msgid "The expectation of the corresponding single qubit gate"
#~ msgstr ""

#~ msgid ""
#~ "Compute the expectation of the direct"
#~ " product of the corresponding two "
#~ "gates."
#~ msgstr ""

#~ msgid "First gate to be applied"
#~ msgstr ""

#~ msgid "Second gate to be applied"
#~ msgstr ""

#~ msgid "Qubit index of the first gate"
#~ msgstr ""

#~ msgid "Qubit index of the second gate"
#~ msgstr ""

#~ msgid "The correlation of the corresponding two qubit gates"
#~ msgstr ""

#~ msgid "Construct the MPS from a given wavefunction."
#~ msgstr ""

#~ msgid "The given wavefunction (any shape is OK)"
#~ msgstr ""

#~ msgid ""
#~ "Compute the expectation of corresponding "
#~ "operators in the form of tensor."
#~ msgstr ""

#~ msgid ""
#~ "Operator and its position on the "
#~ "circuit, eg. ``(gates.Z(), [1]), (gates.X(),"
#~ " [2])`` is for operator :math:`Z_1X_2`"
#~ msgstr ""

#~ msgid "The expectation of corresponding operators"
#~ msgstr ""

#~ msgid "Get the normalized Center Position."
#~ msgstr ""

#~ msgid "Normalized Center Position."
#~ msgstr ""

#~ msgid "Check whether the circuit is legal."
#~ msgstr ""

#~ msgid "Whether the circuit is legal."
#~ msgstr ""

#~ msgid "integer indicating the measure on which quantum line"
#~ msgstr ""

#~ msgid ""
#~ "Middle measurement in the z-basis on "
#~ "the circuit, note the wavefunction "
#~ "output is not normalized with "
#~ "``mid_measurement`` involved, one should "
#~ "normalized the state manually if needed."
#~ msgstr ""

#~ msgid "The index of qubit that the Z direction postselection applied on"
#~ msgstr ""

#~ msgid "0 for spin up, 1 for spin down, defaults to 0"
#~ msgstr ""

#~ msgid "Normalize MPS Circuit according to the center position."
#~ msgstr ""

#~ msgid "Wrapper of tn.FiniteMPS.position. Set orthogonality center."
#~ msgstr ""

#~ msgid "The orthogonality center"
#~ msgstr ""

#~ msgid "Compute the projection between `other` as bra and `self` as ket."
#~ msgstr ""

#~ msgid "ket of the other MPS, which will be converted to bra automatically"
#~ msgstr ""

#~ msgid "The projection in form of tensor"
#~ msgstr ""

#~ msgid ""
#~ "Set truncation rules when double qubit"
#~ " gates are applied. If nothing is "
#~ "specified, no truncation will take place"
#~ " and the bond dimension will keep "
#~ "growing. For more details, refer to "
#~ "`split_tensor`."
#~ msgstr ""

#~ msgid "Tensor with shape [1, -1]"
#~ msgstr ""

#~ msgid ""
#~ "Split the tensor by SVD or QR "
#~ "depends on whether a truncation is "
#~ "required."
#~ msgstr ""

#~ msgid "The input tensor to split."
#~ msgstr ""

#~ msgid ""
#~ "Determine the orthogonal center is on"
#~ " the left tensor or the right "
#~ "tensor."
#~ msgstr ""

#~ msgid "Two tensors after splitting"
#~ msgstr ""

#~ msgid "Quantum state and operator class backend by tensornetwork"
#~ msgstr ""

#~ msgid "Bases: :py:class:`tensorcircuit.quantum.QuOperator`"
#~ msgstr ""

#~ msgid "Represents an adjoint (row) vector via a tensor network."
#~ msgstr ""

#~ msgid ""
#~ "Constructs a new `QuAdjointVector` from "
#~ "a tensor network. This encapsulates an"
#~ " existing tensor network, interpreting it"
#~ " as an adjoint vector (row vector)."
#~ msgstr ""

#~ msgid "The edges of the network to be used as the input edges."
#~ msgstr ""

#~ msgid ""
#~ "Nodes used to refer to parts of"
#~ " the tensor network that are not "
#~ "connected to any input or output "
#~ "edges (for example: a scalar factor)."
#~ msgstr ""

#~ msgid ""
#~ "Optional collection of edges to ignore"
#~ " when performing consistency checks."
#~ msgstr ""

#~ msgid ""
#~ "Construct a `QuAdjointVector` directly from"
#~ " a single tensor. This first wraps"
#~ " the tensor in a `Node`, then "
#~ "constructs the `QuAdjointVector` from that "
#~ "`Node`."
#~ msgstr ""

#~ msgid "The tensor for constructing an QuAdjointVector."
#~ msgstr ""

#~ msgid ""
#~ "Sequence of integer indices specifying "
#~ "the order in which to interpret "
#~ "the axes as subsystems (input edges)."
#~ " If not specified, the axes are "
#~ "taken in ascending order."
#~ msgstr ""

#~ msgid "The new constructed QuAdjointVector give from the given tensor."
#~ msgstr ""

#~ msgid ""
#~ "Represents a linear operator via a "
#~ "tensor network. To interpret a tensor"
#~ " network as a linear operator, some"
#~ " of the dangling edges must be "
#~ "designated as `out_edges` (output edges) "
#~ "and the rest as `in_edges` (input "
#~ "edges). Considered as a matrix, the "
#~ "`out_edges` represent the row index and"
#~ " the `in_edges` represent the column "
#~ "index. The (right) action of the "
#~ "operator on another then consists of "
#~ "connecting the `in_edges` of the first"
#~ " operator to the `out_edges` of the"
#~ " second. Can be used to do "
#~ "simple linear algebra with tensor "
#~ "networks."
#~ msgstr ""

#~ msgid ""
#~ "Creates a new `QuOperator` from a "
#~ "tensor network. This encapsulates an "
#~ "existing tensor network, interpreting it "
#~ "as a linear operator. The network "
#~ "is checked for consistency: All dangling"
#~ " edges must either be in `out_edges`,"
#~ " `in_edges`, or `ignore_edges`."
#~ msgstr ""

#~ msgid "The edges of the network to be used as the output edges."
#~ msgstr ""

#~ msgid ""
#~ "Optional collection of dangling edges to"
#~ " ignore when performing consistency checks."
#~ msgstr ""

#~ msgid ""
#~ "At least one reference node is "
#~ "required to specify a scalar. None "
#~ "provided!"
#~ msgstr ""

#~ msgid ""
#~ "The adjoint of the operator. This "
#~ "creates a new `QuOperator` with "
#~ "complex-conjugate copies of all tensors "
#~ "in the network and with the input"
#~ " and output edges switched."
#~ msgstr ""

#~ msgid ""
#~ "Check that the network has the "
#~ "expected dimensionality. This checks that "
#~ "all input and output edges are "
#~ "dangling and that there are no "
#~ "other dangling edges (except any "
#~ "specified in `ignore_edges`). If not, an"
#~ " exception is raised."
#~ msgstr ""

#~ msgid ""
#~ "Contract the tensor network in place."
#~ " This modifies the tensor network "
#~ "representation of the operator (or "
#~ "vector, or scalar), reducing it to "
#~ "a single tensor, without changing the"
#~ " value."
#~ msgstr ""

#~ msgid "Manually specify the axis ordering of the final tensor."
#~ msgstr ""

#~ msgid "The present object."
#~ msgstr ""

#~ msgid ""
#~ "Contracts the tensor network in place"
#~ " and returns the final tensor. Note"
#~ " that this modifies the tensor "
#~ "network representing the operator. The "
#~ "default ordering for the axes of "
#~ "the final tensor is: `*out_edges, "
#~ "*in_edges`. If there are any \"ignored\""
#~ " edges, their axes come first: "
#~ "`*ignored_edges, *out_edges, *in_edges`."
#~ msgstr ""

#~ msgid ""
#~ "Manually specify the axis ordering of"
#~ " the final tensor. The default "
#~ "ordering is determined by `out_edges` "
#~ "and `in_edges` (see above)."
#~ msgstr ""

#~ msgid "Node count '{}' > 1 after contraction!"
#~ msgstr ""

#~ msgid "The final tensor representing the operator."
#~ msgstr ""

#~ msgid ""
#~ "Construct a `QuOperator` directly from a"
#~ " single tensor. This first wraps the"
#~ " tensor in a `Node`, then constructs"
#~ " the `QuOperator` from that `Node`."
#~ msgstr ""

#~ msgid "The tensor."
#~ msgstr ""

#~ msgid "The axis indices of `tensor` to use as `out_edges`."
#~ msgstr ""

#~ msgid "The axis indices of `tensor` to use as `in_edges`."
#~ msgstr ""

#~ msgid "The new operator."
#~ msgstr ""

#~ msgid "All tensor-network nodes involved in the operator."
#~ msgstr ""

#~ msgid ""
#~ "The norm of the operator. This is"
#~ " the 2-norm (also known as the "
#~ "Frobenius or Hilbert-Schmidt norm)."
#~ msgstr ""

#~ msgid ""
#~ "The partial trace of the operator. "
#~ "Subsystems to trace out are supplied "
#~ "as indices, so that dangling edges "
#~ "are connected to each other as: "
#~ "`out_edges[i] ^ in_edges[i] for i in "
#~ "subsystems_to_trace_out` This does not modify"
#~ " the original network. The original "
#~ "ordering of the remaining subsystems is"
#~ " maintained."
#~ msgstr ""

#~ msgid "Indices of subsystems to trace out."
#~ msgstr ""

#~ msgid "A new QuOperator or QuScalar representing the result."
#~ msgstr ""

#~ msgid ""
#~ "Tensor product with another operator. "
#~ "Given two operators `A` and `B`, "
#~ "produces a new operator `AB` "
#~ "representing `A` ⊗ `B`. The `out_edges`"
#~ " (`in_edges`) of `AB` is simply the"
#~ " concatenation of the `out_edges` "
#~ "(`in_edges`) of `A.copy()` with that of"
#~ " `B.copy()`: `new_out_edges = [*out_edges_A_copy,"
#~ " *out_edges_B_copy]` `new_in_edges = "
#~ "[*in_edges_A_copy, *in_edges_B_copy]`"
#~ msgstr ""

#~ msgid "The other operator (`B`)."
#~ msgstr ""

#~ msgid "The result (`AB`)."
#~ msgstr ""

#~ msgid "The trace of the operator."
#~ msgstr ""

#~ msgid "Represents a scalar via a tensor network."
#~ msgstr ""

#~ msgid ""
#~ "Constructs a new `QuScalar` from a "
#~ "tensor network. This encapsulates an "
#~ "existing tensor network, interpreting it "
#~ "as a scalar."
#~ msgstr ""

#~ msgid ""
#~ "Nodes used to refer to the tensor"
#~ " network (need not be exhaustive -"
#~ " one node from each disconnected "
#~ "subnetwork is sufficient)."
#~ msgstr ""

#~ msgid ""
#~ "Construct a `QuScalar` directly from a"
#~ " single tensor. This first wraps the"
#~ " tensor in a `Node`, then constructs"
#~ " the `QuScalar` from that `Node`."
#~ msgstr ""

#~ msgid "The tensor for constructing a new QuScalar."
#~ msgstr ""

#~ msgid "The new constructed QuScalar from the given tensor."
#~ msgstr ""

#~ msgid "Represents a (column) vector via a tensor network."
#~ msgstr ""

#~ msgid ""
#~ "Constructs a new `QuVector` from a "
#~ "tensor network. This encapsulates an "
#~ "existing tensor network, interpreting it "
#~ "as a (column) vector."
#~ msgstr ""

#~ msgid ""
#~ "Construct a `QuVector` directly from a"
#~ " single tensor. This first wraps the"
#~ " tensor in a `Node`, then constructs"
#~ " the `QuVector` from that `Node`."
#~ msgstr ""

#~ msgid "The tensor for constructing a \"QuVector\"."
#~ msgstr ""

#~ msgid ""
#~ "Sequence of integer indices specifying "
#~ "the order in which to interpret "
#~ "the axes as subsystems (output edges)."
#~ " If not specified, the axes are "
#~ "taken in ascending order."
#~ msgstr ""

#~ msgid "The new constructed QuVector from the given tensor."
#~ msgstr ""

#~ msgid ""
#~ "Check the vector spaces represented by"
#~ " two lists of edges are compatible."
#~ " The number of edges must be "
#~ "the same and the dimensions of "
#~ "each pair of edges must match. "
#~ "Otherwise, an exception is raised. "
#~ ":param edges_1: List of edges "
#~ "representing a many-body Hilbert space."
#~ " :type edges_1: Sequence[Edge] :param "
#~ "edges_2: List of edges representing a"
#~ " many-body Hilbert space. :type "
#~ "edges_2: Sequence[Edge]"
#~ msgstr ""

#~ msgid ""
#~ "Hilbert-space mismatch: \"Cannot connect "
#~ "{} subsystems with {} subsystems\", or"
#~ " \"Input dimension {} != output "
#~ "dimension {}.\""
#~ msgstr ""

#~ msgid ""
#~ "Eliminates any connected CopyNodes that "
#~ "are identity matrices. This will modify"
#~ " the network represented by `nodes`. "
#~ "Only identities that are connected to"
#~ " other nodes are eliminated."
#~ msgstr ""

#~ msgid "Collection of nodes to search."
#~ msgstr ""

#~ msgid ""
#~ "The Dictionary mapping remaining Nodes "
#~ "to any replacements, Dictionary specifying "
#~ "all dangling-edge replacements."
#~ msgstr ""

#~ msgid "Compute the entropy from the given density matrix ``rho``."
#~ msgstr ""

#~ msgid "[description], defaults to 1e-12"
#~ msgstr ""

#~ msgid ""
#~ "Note: further jit is recommended. For"
#~ " large Hilbert space, sparse Hamiltonian"
#~ " is recommended"
#~ msgstr ""

#~ msgid ""
#~ "Construct a 'QuOperator' representing the "
#~ "identity on a given space. Internally,"
#~ " this is done by constructing "
#~ "'CopyNode's for each edge, with "
#~ "dimension according to 'space'."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of integers for the "
#~ "dimensions of the tensor product factors"
#~ " of the space (the edges in the"
#~ " tensor network)."
#~ msgstr ""

#~ msgid "The data type (for conversion to dense)."
#~ msgstr ""

#~ msgid "The desired identity operator."
#~ msgstr ""

#~ msgid ""
#~ "Simulate the measuring of each qubit "
#~ "of ``p`` in the computational basis, "
#~ "thus producing output like that of "
#~ "``qiskit``."
#~ msgstr ""

#~ msgid ""
#~ "The quantum state, assumed to be "
#~ "normalized, as either a ket or "
#~ "density operator."
#~ msgstr ""

#~ msgid "The number of counts to perform."
#~ msgstr ""

#~ msgid ""
#~ "Defaults True. The bool indicating "
#~ "whether the return form is in the"
#~ " form of two array or one of"
#~ " the same length as the ``state`` "
#~ "(if ``sparse=False``)."
#~ msgstr ""

#~ msgid "The counts for each bit string measured."
#~ msgstr ""

#~ msgid ""
#~ "Constructs an appropriately specialized "
#~ "QuOperator. If there are no edges, "
#~ "creates a QuScalar. If the are "
#~ "only output (input) edges, creates a "
#~ "QuVector (QuAdjointVector). Otherwise creates "
#~ "a QuOperator."
#~ msgstr ""

#~ msgid ""
#~ "op = qu.quantum_constructor([], [psi_node[0], "
#~ "psi_node[1]]) >>> show_attributes(op) op.is_scalar()"
#~ "          -> False op.is_vector()          -> "
#~ "False op.is_adjoint_vector()  -> True "
#~ "len(op.out_edges)       -> 0 len(op.in_edges)"
#~ "        -> 2 >>> # psi_node[0] -> "
#~ "op.in_edges[0] >>> # psi_node[1] -> "
#~ "op.in_edges[1]"
#~ msgstr ""

#~ msgid "output edges."
#~ msgstr ""

#~ msgid "in edges."
#~ msgstr ""

#~ msgid ""
#~ "reference nodes for the tensor network"
#~ " (needed if there is a scalar "
#~ "component)."
#~ msgstr ""

#~ msgid "edges to ignore when checking the dimensionality of the tensor network."
#~ msgstr ""

#~ msgid "The new created QuOperator object."
#~ msgstr ""

#~ msgid "Compute the reduced density matrix from the quantum state ``state``."
#~ msgstr ""

#~ msgid "Compute the trace of several inputs ``o`` as tensor or ``QuOperator``."
#~ msgstr ""

#~ msgid "\\mathrm{Tr}(\\prod_i O_i)"
#~ msgstr ""

#~ msgid "the trace of several inputs"
#~ msgstr ""

#~ msgid "Tensornetwork Simplification"
#~ msgstr ""

#~ msgid ""
#~ "Get the new shape of two nodes,"
#~ " also supporting to return original "
#~ "shapes of two nodes."
#~ msgstr ""

#~ msgid "node one"
#~ msgstr ""

#~ msgid "node two"
#~ msgstr ""

#~ msgid "Whether to include original shape of two nodes, default is True."
#~ msgstr ""

#~ msgid "The new shape of the two nodes."
#~ msgstr ""

#~ msgid ""
#~ "Contract between Node ``a`` and ``b``,"
#~ " with correct shape only and no "
#~ "calculation"
#~ msgstr ""

#~ msgid "Shortcuts for measurement patterns on circuit"
#~ msgstr ""

#~ msgid "Some common graphs and lattices"
#~ msgstr ""

#~ msgid "1D chain with ``n`` sites"
#~ msgstr ""

#~ msgid ""
#~ "This measurements pattern is specifically "
#~ "suitable for vmap. Parameterize the "
#~ "Pauli string to be measured."
#~ msgstr ""

#~ msgid ""
#~ "parameter tensors determines what Pauli "
#~ "string to be measured, shape is "
#~ "[nwires, 4] if onehot is False."
#~ msgstr ""

#~ msgid ""
#~ "[description], defaults to False. If set"
#~ " to be True, structures will first"
#~ " go through onehot procedure."
#~ msgstr ""

#~ msgid "COO_sparse_matrix"
#~ msgstr ""

#~ msgid "a real and scalar tensor of shape []"
#~ msgstr ""

#~ msgid "Helper functions"
#~ msgstr ""

#~ msgid ""
#~ "Return a callable function for output"
#~ " ith parts of the original output "
#~ "along the first axis. Original output"
#~ " supports List and Tensor."
#~ msgstr ""

#~ msgid "The function to be applied this method"
#~ msgstr ""

#~ msgid "The ith parts of original output along the first axis (axis=0 or dim=0)"
#~ msgstr ""

#~ msgid "The modified callable function"
#~ msgstr ""

#~ msgid "Visualization on circuits"
#~ msgstr ""

#~ msgid "# TODO(@YHPeter): add examples"
#~ msgstr ""

#~ msgid ""
#~ "Generate the PDF file with given "
#~ "latex string and filename. Latex command"
#~ " and file path can be specified. "
#~ "When notebook is True, convert the "
#~ "output PDF file to image and "
#~ "return a Image object."
#~ msgstr ""

#~ msgid "String of latex content"
#~ msgstr ""

#~ msgid "File name, defaults to random UUID `str(uuid4())`"
#~ msgstr ""

#~ msgid "Executable Latex command, defaults to `pdflatex`"
#~ msgstr ""

#~ msgid "File path, defaults to current working place `os.getcwd()`"
#~ msgstr ""

#~ msgid "if notebook is True, return `Image` object; otherwise return `None`"
#~ msgstr ""

#~ msgid "_summary_"
#~ msgstr ""

#~ msgid "_description_"
#~ msgstr ""

#~ msgid "[description], default is None."
#~ msgstr ""

#~ msgid "_description_, default is (1, -1)."
#~ msgstr ""

#~ msgid ""
#~ "A collection of useful function snippets"
#~ " that irrelevant with the main "
#~ "modules or await for further refactor"
#~ msgstr ""

#~ msgid ""
#~ "See the original backend API at "
#~ "`jax backend "
#~ "<https://github.com/google/TensorNetwork/blob/master/tensornetwork/backends/jax/jax_backend.py>`_"
#~ msgstr ""

#~ msgid "Compute sigmoid of input ``a``"
#~ msgstr ""

#~ msgid ""
#~ "See the original backend API at "
#~ "`pytorch backend "
#~ "<https://github.com/google/TensorNetwork/blob/master/tensornetwork/backends/pytorch/pytorch_backend.py>`_"
#~ msgstr ""

#~ msgid ""
#~ "See the original backend API at "
#~ "`tensorflow backend "
#~ "<https://github.com/google/TensorNetwork/blob/master/tensornetwork/backends/tensorflow/tensorflow_backend.py>`_"
#~ msgstr ""

#~ msgid ""
#~ "Return ``operand[indices]``, both ``operand`` "
#~ "and ``indices`` are rank-1 tensor."
#~ msgstr ""

#~ msgid "rank-1 tensor"
#~ msgstr ""

#~ msgid "rank-1 tensor with int dtype"
#~ msgstr ""

#~ msgid "``operand[indices]``"
#~ msgstr ""

#~ msgid "Examples"
#~ msgstr ""

#~ msgid "Parameters for the gate."
#~ msgstr ""

#~ msgid "Apply fredkin gate on the circuit."
#~ msgstr ""

#~ msgid ""
#~ "Qubit number than the gate applies "
#~ "on. The matrix for the gate is"
#~ "  .. math::        \\begin{bmatrix}    1.+0.j "
#~ "& 0.+0.j & 0.+0.j & 0.+0.j & "
#~ "0.+0.j & 0.+0.j & 0.+0.j & "
#~ "0.+0.j\\\\    0.+0.j & 1.+0.j & 0.+0.j"
#~ " & 0.+0.j & 0.+0.j & 0.+0.j &"
#~ " 0.+0.j & 0.+0.j\\\\    0.+0.j & "
#~ "0.+0.j & 1.+0.j & 0.+0.j & 0.+0.j"
#~ " & 0.+0.j & 0.+0.j & 0.+0.j\\\\"
#~ "    0.+0.j & 0.+0.j & 0.+0.j & "
#~ "1.+0.j & 0.+0.j & 0.+0.j & 0.+0.j"
#~ " & 0.+0.j\\\\    0.+0.j & 0.+0.j &"
#~ " 0.+0.j & 0.+0.j & 1.+0.j & "
#~ "0.+0.j & 0.+0.j & 0.+0.j\\\\    0.+0.j"
#~ " & 0.+0.j & 0.+0.j & 0.+0.j &"
#~ " 0.+0.j & 0.+0.j & 1.+0.j & "
#~ "0.+0.j\\\\    0.+0.j & 0.+0.j & 0.+0.j"
#~ " & 0.+0.j & 0.+0.j & 1.+0.j &"
#~ " 0.+0.j & 0.+0.j\\\\    0.+0.j & "
#~ "0.+0.j & 0.+0.j & 0.+0.j & 0.+0.j"
#~ " & 0.+0.j & 0.+0.j & 1.+0.j "
#~ "\\end{bmatrix}"
#~ msgstr ""

#~ msgid ""
#~ "\\begin{bmatrix}    1.+0.j & 0.+0.j & "
#~ "0.+0.j & 0.+0.j & 0.+0.j & 0.+0.j"
#~ " & 0.+0.j & 0.+0.j\\\\    0.+0.j &"
#~ " 1.+0.j & 0.+0.j & 0.+0.j & "
#~ "0.+0.j & 0.+0.j & 0.+0.j & "
#~ "0.+0.j\\\\    0.+0.j & 0.+0.j & 1.+0.j"
#~ " & 0.+0.j & 0.+0.j & 0.+0.j &"
#~ " 0.+0.j & 0.+0.j\\\\    0.+0.j & "
#~ "0.+0.j & 0.+0.j & 1.+0.j & 0.+0.j"
#~ " & 0.+0.j & 0.+0.j & 0.+0.j\\\\"
#~ "    0.+0.j & 0.+0.j & 0.+0.j & "
#~ "0.+0.j & 1.+0.j & 0.+0.j & 0.+0.j"
#~ " & 0.+0.j\\\\    0.+0.j & 0.+0.j &"
#~ " 0.+0.j & 0.+0.j & 0.+0.j & "
#~ "0.+0.j & 1.+0.j & 0.+0.j\\\\    0.+0.j"
#~ " & 0.+0.j & 0.+0.j & 0.+0.j &"
#~ " 0.+0.j & 1.+0.j & 0.+0.j & "
#~ "0.+0.j\\\\    0.+0.j & 0.+0.j & 0.+0.j"
#~ " & 0.+0.j & 0.+0.j & 0.+0.j &"
#~ " 0.+0.j & 1.+0.j \\end{bmatrix}"
#~ msgstr ""

#~ msgid "Apply mpo gate in MPO format on the circuit."
#~ msgstr ""

#~ msgid "Apply multicontrol gate in MPO format on the circuit."
#~ msgstr ""

#~ msgid "Apply orx gate with parameters on the circuit."
#~ msgstr ""

#~ msgid "Apply ory gate with parameters on the circuit."
#~ msgstr ""

#~ msgid "Apply orz gate with parameters on the circuit."
#~ msgstr ""

#~ msgid "Apply ox gate on the circuit."
#~ msgstr ""

#~ msgid ""
#~ "Qubit number than the gate applies "
#~ "on. The matrix for the gate is"
#~ "  .. math::        \\begin{bmatrix}    0.+0.j "
#~ "& 1.+0.j & 0.+0.j & 0.+0.j\\\\    "
#~ "1.+0.j & 0.+0.j & 0.+0.j & "
#~ "0.+0.j\\\\    0.+0.j & 0.+0.j & 1.+0.j"
#~ " & 0.+0.j\\\\    0.+0.j & 0.+0.j &"
#~ " 0.+0.j & 1.+0.j \\end{bmatrix}"
#~ msgstr ""

#~ msgid ""
#~ "\\begin{bmatrix}    0.+0.j & 1.+0.j & "
#~ "0.+0.j & 0.+0.j\\\\    1.+0.j & 0.+0.j"
#~ " & 0.+0.j & 0.+0.j\\\\    0.+0.j &"
#~ " 0.+0.j & 1.+0.j & 0.+0.j\\\\    "
#~ "0.+0.j & 0.+0.j & 0.+0.j & 1.+0.j"
#~ " \\end{bmatrix}"
#~ msgstr ""

#~ msgid "Apply oy gate on the circuit."
#~ msgstr ""

#~ msgid ""
#~ "Qubit number than the gate applies "
#~ "on. The matrix for the gate is"
#~ "  .. math::        \\begin{bmatrix}    0.+0.j "
#~ "& 0.-1.j & 0.+0.j & 0.+0.j\\\\    "
#~ "0.+1.j & 0.+0.j & 0.+0.j & "
#~ "0.+0.j\\\\    0.+0.j & 0.+0.j & 1.+0.j"
#~ " & 0.+0.j\\\\    0.+0.j & 0.+0.j &"
#~ " 0.+0.j & 1.+0.j \\end{bmatrix}"
#~ msgstr ""

#~ msgid ""
#~ "\\begin{bmatrix}    0.+0.j & 0.-1.j & "
#~ "0.+0.j & 0.+0.j\\\\    0.+1.j & 0.+0.j"
#~ " & 0.+0.j & 0.+0.j\\\\    0.+0.j &"
#~ " 0.+0.j & 1.+0.j & 0.+0.j\\\\    "
#~ "0.+0.j & 0.+0.j & 0.+0.j & 1.+0.j"
#~ " \\end{bmatrix}"
#~ msgstr ""

#~ msgid "Apply oz gate on the circuit."
#~ msgstr ""

#~ msgid ""
#~ "Qubit number than the gate applies "
#~ "on. The matrix for the gate is"
#~ "  .. math::        \\begin{bmatrix}    1.+0.j "
#~ "& 0.+0.j & 0.+0.j & 0.+0.j\\\\    "
#~ "0.+0.j & -1.+0.j & 0.+0.j & "
#~ "0.+0.j\\\\    0.+0.j & 0.+0.j & 1.+0.j"
#~ " & 0.+0.j\\\\    0.+0.j & 0.+0.j &"
#~ " 0.+0.j & 1.+0.j \\end{bmatrix}"
#~ msgstr ""

#~ msgid ""
#~ "\\begin{bmatrix}    1.+0.j & 0.+0.j & "
#~ "0.+0.j & 0.+0.j\\\\    0.+0.j & -1.+0.j"
#~ " & 0.+0.j & 0.+0.j\\\\    0.+0.j &"
#~ " 0.+0.j & 1.+0.j & 0.+0.j\\\\    "
#~ "0.+0.j & 0.+0.j & 0.+0.j & 1.+0.j"
#~ " \\end{bmatrix}"
#~ msgstr ""

#~ msgid ""
#~ "If not None, the initial state of"
#~ " the circuit is taken as ``inputs``"
#~ " instead of :math:`\\vert 0\\rangle^n` "
#~ "qubits, defaults to None."
#~ msgstr ""

#~ msgid "(Nodes, dangling Edges) for a MPS like initial wavefunction."
#~ msgstr ""

#~ msgid "Returns the amplitude of the circuit given the bitstring l."
#~ msgstr ""

#~ msgid "The bitstring of 0 and 1s."
#~ msgstr ""

#~ msgid "The amplitude of the circuit."
#~ msgstr ""

#~ msgid ""
#~ "Apply the ciurict in form of "
#~ "quantum intermediate representation after the"
#~ " current cirucit."
#~ msgstr ""

#~ msgid "The quantum intermediate representation."
#~ msgstr ""

#~ msgid "Apply the gate to two bits with given indexes."
#~ msgstr ""

#~ msgid "The Gate applied on bits."
#~ msgstr ""

#~ msgid "The index of the bit to apply the Gate."
#~ msgstr ""

#~ msgid "A list of ``tn.Node`` for Kraus operators."
#~ msgstr ""

#~ msgid "The qubits index that Kraus channel is applied on."
#~ msgstr ""

#~ msgid ""
#~ "Random tensor between 0 or 1, "
#~ "defaults to be None, the random "
#~ "number will be generated automatically"
#~ msgstr ""

#~ msgid "Apply the gate to the bit with the given index."
#~ msgstr ""

#~ msgid "The Gate applied on the bit."
#~ msgstr ""

#~ msgid ""
#~ "Operator and its position on the "
#~ "circuit, eg. ``(tc.gates.z(), [1, ]), "
#~ "(tc.gates.x(), [2, ])`` is for operator"
#~ " :math:`Z_1X_2`."
#~ msgstr ""

#~ msgid ""
#~ "If True, then the wavefunction tensor"
#~ " is cached for further expectation "
#~ "evaluation, defaults to be true."
#~ msgstr ""

#~ msgid "\"Cannot measure two operators in one index\""
#~ msgstr ""

#~ msgid "Restore the circuit from the quantum intermediate representation."
#~ msgstr ""

#~ msgid "The quantum intermediate representation of a circuit."
#~ msgstr ""

#~ msgid "Extra circuit parameters."
#~ msgstr ""

#~ msgid "The circuit have same gates in the qir."
#~ msgstr ""

#~ msgid "The bool indicating whether the circuit is legal"
#~ msgstr ""

#~ msgid "Measure on which quantum line."
#~ msgstr ""

#~ msgid "If true, theoretical probability is also returned."
#~ msgstr ""

#~ msgid "The index of qubit that the Z direction postselection applied on."
#~ msgstr ""

#~ msgid "0 for spin up, 1 for spin down, defaults to be 0."
#~ msgstr ""

#~ msgid "Sampled bit string and the corresponding theoretical probability."
#~ msgstr ""

#~ msgid "The str indicating the form of the output wavefunction."
#~ msgstr ""

#~ msgid "Tensor with the corresponding shape."
#~ msgstr ""

#~ msgid "Return the quantum intermediate representation of the circuit."
#~ msgstr ""

#~ msgid "The quantum intermediate representation of the circuit."
#~ msgstr ""

#~ msgid "Returns a :math:`\\LaTeX` bmatrix."
#~ msgstr ""

#~ msgid ":math:`\\LaTeX`-formatted string for bmatrix of the array a"
#~ msgstr ""

#~ msgid ""
#~ "Controlled rotation gate. When the "
#~ "control qubit is 1, `rgate` is "
#~ "applied to the target qubit."
#~ msgstr ""

#~ msgid ""
#~ "Faster exponential gate directly implemented"
#~ " based on RHS. Only works when "
#~ ":math:`U^2 = I` is an identity "
#~ "matrix."
#~ msgstr ""

#~ msgid ""
#~ "\\textrm{exp}(U) &= e^{-j \\theta U} \\\\\n"
#~ "        &= \\cos(\\theta) I - j \\sin(\\theta) U \\\\\n"
#~ "\n"
#~ msgstr ""

#~ msgid "input unitary :math:`U`"
#~ msgstr ""

#~ msgid ""
#~ "\\textrm{exp}(U) = e^{-j \\theta U}\n"
#~ "\n"
#~ msgstr ""

#~ msgid ""
#~ "\\textrm{iSwap}(\\theta) =\n"
#~ "\\begin{pmatrix}\n"
#~ "    1 & 0 & 0 & 0\\\\\n"
#~ "    0 & \\cos(\\frac{\\pi}{2} \\theta )"
#~ " & j \\sin(\\frac{\\pi}{2} \\theta ) "
#~ "& 0\\\\\n"
#~ "    0 & j \\sin(\\frac{\\pi}{2} \\theta"
#~ " ) & \\cos(\\frac{\\pi}{2} \\theta ) "
#~ "& 0\\\\\n"
#~ "    0 & 0 & 0 & 1\\\\\n"
#~ "\\end{pmatrix}\n"
#~ "\n"
#~ msgstr ""

#~ msgid "Corresponding Tensor"
#~ msgstr ""

#~ msgid ""
#~ "R(\\theta, \\alpha, \\phi) = j \\cos(\\theta) I\n"
#~ "- j \\cos(\\phi) \\sin(\\alpha) \\sin(\\theta) X\n"
#~ "- j \\sin(\\phi) \\sin(\\alpha) \\sin(\\theta) Y\n"
#~ "- j \\sin(\\theta) \\cos(\\alpha) Z\n"
#~ "\n"
#~ msgstr ""

#~ msgid "A random single-qubit gate"
#~ msgstr ""

#~ msgid "A random two-qubit gate"
#~ msgstr ""

#~ msgid ""
#~ "Rotation gate implemented by matrix "
#~ "exponential. The output is the same "
#~ "as `rgate`."
#~ msgstr ""

#~ msgid ""
#~ "R(\\theta, \\alpha, \\phi) = e^{-j "
#~ "\\theta \\left[\\sin(\\alpha) \\cos(\\phi) X\n"
#~ "                                           + "
#~ "\\sin(\\alpha) \\sin(\\phi) Y\n"
#~ "                                           + "
#~ "\\cos(\\alpha) Z\\right]}\n"
#~ "\n"
#~ msgstr ""

#~ msgid "Rotation gate along :math:`x` axis."
#~ msgstr ""

#~ msgid ""
#~ "RX(\\theta) = e^{-j\\frac{\\theta}{2}X}\n"
#~ "\n"
#~ msgstr ""

#~ msgid "Rotation gate along :math:`y` axis."
#~ msgstr ""

#~ msgid ""
#~ "RY(\\theta) = e^{-j\\frac{\\theta}{2}Y}\n"
#~ "\n"
#~ msgstr ""

#~ msgid "Rotation gate along :math:`z` axis."
#~ msgstr ""

#~ msgid ""
#~ "RZ(\\theta) = e^{-j\\frac{\\theta}{2}Z}\n"
#~ "\n"
#~ msgstr ""

#~ msgid "IMPORT"
#~ msgstr ""

#~ msgid "The adjoint of the operator."
#~ msgstr ""

#~ msgid "The deep copy of the operator."
#~ msgstr ""

#~ msgid "The new copy of the operator."
#~ msgstr ""

#~ msgid ""
#~ "Check the vector spaces represented by"
#~ " two lists of edges are compatible."
#~ " The number of edges must be "
#~ "the same and the dimensions of "
#~ "each pair of edges must match. "
#~ "Otherwise, an exception is raised."
#~ msgstr ""

#~ msgid "List of edges representing a many-body Hilbert space."
#~ msgstr ""

#~ msgid ""
#~ "Compute :math:`\\prod_{i\\in \\text{index}} s_i`,"
#~ " where the probability for each "
#~ "bitstring is given as a vector "
#~ "``results``."
#~ msgstr ""

#~ msgid "list of int, indicating the position in the bitstring"
#~ msgstr ""

#~ msgid "probability vector of shape 2^n"
#~ msgstr ""

#~ msgid "Correlation expectation from measurement shots."
#~ msgstr ""

#~ msgid "The density matrix in form of Tensor or QuOperator."
#~ msgstr ""

#~ msgid "Epsilon, default is 1e-12."
#~ msgstr ""

#~ msgid "Entropy on the given density matrix."
#~ msgstr ""

#~ msgid "Compute the free energy of the given density matrix."
#~ msgstr ""

#~ msgid "Hamiltonian operator in form of Tensor or QuOperator."
#~ msgstr ""

#~ msgid "Constant for the optimization, default is 1."
#~ msgstr ""

#~ msgid ""
#~ "The free energy of the given "
#~ "density matrix with the Hamiltonian "
#~ "operator."
#~ msgstr ""

#~ msgid ""
#~ "Generate a local Hamiltonian operator "
#~ "based on the given sequence of "
#~ "Tensor. Note: further jit is "
#~ "recommended. For large Hilbert space, "
#~ "sparse Hamiltonian is recommended"
#~ msgstr ""

#~ msgid "A sequence of Tensor."
#~ msgstr ""

#~ msgid "Return Hamiltonian operator in form of matrix, defaults to True."
#~ msgstr ""

#~ msgid "The Hamiltonian operator in form of QuOperator or matrix."
#~ msgstr ""

#~ msgid "Generate Heisenberg Hamiltonian with possible external fields."
#~ msgstr ""

#~ msgid "input circuit graph"
#~ msgstr ""

#~ msgid "zz coupling, default is 1.0"
#~ msgstr ""

#~ msgid "xx coupling, default is 1.0"
#~ msgstr ""

#~ msgid "yy coupling, default is 1.0"
#~ msgstr ""

#~ msgid "External field on z direction, default is 0.0"
#~ msgstr ""

#~ msgid "External field on y direction, default is 0.0"
#~ msgstr ""

#~ msgid "External field on x direction, default is 0.0"
#~ msgstr ""

#~ msgid "Whether to return sparse Hamiltonian operator, default is True."
#~ msgstr ""

#~ msgid "Hamiltonian measurements"
#~ msgstr ""

#~ msgid "A list of output edges."
#~ msgstr ""

#~ msgid "A list of input edges."
#~ msgstr ""

#~ msgid ""
#~ "Reference nodes for the tensor network"
#~ " (needed if there is a. scalar "
#~ "component)."
#~ msgstr ""

#~ msgid "Edges to ignore when checking the dimensionality of the tensor network."
#~ msgstr ""

#~ msgid "The quantum state in form of Tensor or QuOperator."
#~ msgstr ""

#~ msgid ""
#~ "the index list that is traced out,"
#~ " if cut is a int, it indicates"
#~ " [0, cut] as the traced out "
#~ "region"
#~ msgstr ""

#~ msgid "probability decoration, default is None."
#~ msgstr ""

#~ msgid "The reduced density matrix."
#~ msgstr ""

#~ msgid "Compute the Rényi entropy of order :math:`k` by given density matrix."
#~ msgstr ""

#~ msgid "The order of Rényi entropy, default is 2."
#~ msgstr ""

#~ msgid "The :math:`k` th order of Rényi entropy."
#~ msgstr ""

#~ msgid ""
#~ "Compute the Rényi free energy of "
#~ "the corresponding density matrix and "
#~ "Hamiltonian."
#~ msgstr ""

#~ msgid ""
#~ "Generate all n-bitstrings as an array,"
#~ " each row is a bitstring basis. "
#~ "Return m-th col."
#~ msgstr ""

#~ msgid "length of a bitstring"
#~ msgstr ""

#~ msgid "m<n,"
#~ msgstr ""

#~ msgid "the binary elements to generate, default is (1, -1)."
#~ msgstr ""

#~ msgid ""
#~ "The value for the m-th position in"
#~ " bitstring when going through all "
#~ "bitstring basis."
#~ msgstr ""

#~ msgid "The trace of several inputs."
#~ msgstr ""

#~ msgid ""
#~ "For each pair in links, the input"
#~ " product state |00> is transformed as"
#~ " (01>-|10>)"
#~ msgstr ""

#~ msgid "Circuit in"
#~ msgstr ""

#~ msgid ""
#~ "pairs indices for Bell pairs, defaults"
#~ " to None, corresponds to neighbor "
#~ "links"
#~ msgstr ""

#~ msgid "Circuit out"
#~ msgstr ""

#~ msgid "tensorcircuit.templates.chems"
#~ msgstr ""

#~ msgid "Useful utilities for quantum chemistry related task"
#~ msgstr ""

#~ msgid ""
#~ "Get Pauli string array and weights "
#~ "array for a qubit Hamiltonian as a"
#~ " sum of Pauli strings defined in "
#~ "openfermion QubitOperator."
#~ msgstr ""

#~ msgid "``openfermion.ops.operators.qubit_operator.QubitOperator``"
#~ msgstr ""

#~ msgid "The number of qubits"
#~ msgstr ""

#~ msgid "Pauli String array and weights array"
#~ msgstr ""

#~ msgid "tensorcircuit.templates.dataset"
#~ msgstr ""

#~ msgid "Quantum machine learning related data preprocessing and embedding"
#~ msgstr ""

#~ msgid "example"
#~ msgstr ""

#~ msgid "The circuit to be measured"
#~ msgstr ""

#~ msgid ""
#~ "parameter tensors determines what Pauli "
#~ "string to be measured, shape is "
#~ "[nwires, 4] if ``onehot`` is False "
#~ "and [nwires] if ``onehot`` is True."
#~ msgstr ""

#~ msgid ""
#~ "defaults to False. If set to be"
#~ " True, structures will first go "
#~ "through onehot procedure."
#~ msgstr ""

#~ msgid ""
#~ "The expectation value of given Pauli "
#~ "string by the tensor ``structures``."
#~ msgstr ""

#~ msgid ""
#~ "Evaluate Heisenberg energy expectation, whose"
#~ " Hamiltonian is defined on the "
#~ "lattice graph ``g`` as follows: (e "
#~ "are edges in graph ``g`` where e1"
#~ " and e2 are two nodes for edge"
#~ " e and v are nodes in graph "
#~ "``g``)"
#~ msgstr ""

#~ msgid ""
#~ "H = \\sum_{e\\in g} w_e (h_{xx} "
#~ "X_{e1}X_{e2} + h_{yy} Y_{e1}Y_{e2} + "
#~ "h_{zz} Z_{e1}Z_{e2})\n"
#~ " + \\sum_{v\\in g} (h_x X_v + h_y Y_v + h_z Z_v)"
#~ msgstr ""

#~ msgid "Circuit to be measured"
#~ msgstr ""

#~ msgid "Lattice graph defining Heisenberg Hamiltonian"
#~ msgstr ""

#~ msgid "[description], defaults to 1.0"
#~ msgstr ""

#~ msgid "[description], defaults to 0.0"
#~ msgstr ""

#~ msgid "Value of Heisenberg energy"
#~ msgstr ""

#~ msgid ""
#~ "Evaluate expectation of operator ``mpo`` "
#~ "defined in ``QuOperator`` MPO format "
#~ "with the output quantum state from "
#~ "circuit ``c``."
#~ msgstr ""

#~ msgid "The circuit for the output state"
#~ msgstr ""

#~ msgid "MPO operator"
#~ msgstr ""

#~ msgid "a real and scalar tensor of shape [] as the expectation value"
#~ msgstr ""

#~ msgid ""
#~ "Evaluate Hamiltonian expectation where "
#~ "``hamiltonian`` can be dense matrix, "
#~ "sparse matrix or MPO."
#~ msgstr ""

#~ msgid "The circuit whose output state is used to evaluate the expectation"
#~ msgstr ""

#~ msgid "Hamiltonian matrix in COO_sparse_matrix form"
#~ msgstr ""

#~ msgid ""
#~ "Evaluate Hamiltonian expectation where "
#~ "``hamiltonian`` is kept in sparse matrix"
#~ " form to save space"
#~ msgstr ""

#~ msgid ""
#~ "Compute spin glass energy defined on "
#~ "graph ``g`` expectation for output state"
#~ " of the circuit ``c``. The "
#~ "Hamiltonian to be evaluated is defined"
#~ " as (first term is determined by "
#~ "node weights while the second term "
#~ "is determined by edge weights of "
#~ "the graph):"
#~ msgstr ""

#~ msgid "H = \\sum_{v\\in g} w_v Z_v + \\sum_{e\\in g} w_e Z_{e1} Z_{e2}"
#~ msgstr ""

#~ msgid "The quantum circuit"
#~ msgstr ""

#~ msgid "The graph for spin glass Hamiltonian definition"
#~ msgstr ""

#~ msgid ""
#~ "Whether measure the circuit with reusing"
#~ " the wavefunction, defaults to True"
#~ msgstr ""

#~ msgid "The spin glass energy expectation value"
#~ msgstr ""

#~ msgid "tensorcircuit.translation"
#~ msgstr ""

#~ msgid "Circuit object translation in different packages"
#~ msgstr ""

