# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The TensorCircuit Authors
# This file is distributed under the same license as the tensorcircuit
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tensorcircuit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-27 20:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/sharpbits.rst:3
msgid "TensorCircuit: The Sharp Bits ðŸ”ª"
msgstr ""

#: ../../source/sharpbits.rst:5
msgid ""
"Be fast is never for free, though much cheaper in TensorCircuit, but you "
"have to be cautious especially in terms of AD, JIT compatibility. We will"
" go through the main sharp edges ðŸ”ª in this note."
msgstr ""

#: ../../source/sharpbits.rst:9
msgid "Jit Compatibility"
msgstr ""

#: ../../source/sharpbits.rst:12
msgid "Non tensor input or varying shape tensor input"
msgstr ""

#: ../../source/sharpbits.rst:14
msgid ""
"The input must be in tensor form and the input tensor shape must be fixed"
" otherwise the recompilation is incurred which is time-consuming. "
"Therefore, if there are input args that are non-tensor or varying shape "
"tensors and frequently change, jit is not recommend."
msgstr ""

#: ../../source/sharpbits.rst:38
msgid "Mix use of numpy and ML backend APIs"
msgstr ""

#: ../../source/sharpbits.rst:40
msgid ""
"To make the function jittable and ad-aware, every ops in the function "
"should be called via ML backend (``tc.backend`` API or direct API for the"
" chosen backend ``tf`` or ``jax``). This is because the ML backend has to"
" create the computational graph to carry out AD and JIT transformation. "
"For numpy ops, they will be only called in jit staging time (the first "
"run)."
msgstr ""

#: ../../source/sharpbits.rst:54
msgid ""
"Numpy call inside jitted function can be helpful if you are sure of the "
"behavior is what you expect."
msgstr ""

#: ../../source/sharpbits.rst:83
msgid "list append under if"
msgstr ""

#: ../../source/sharpbits.rst:85
msgid ""
"Append something to a Python list within if whose condition is based on "
"tensor values will lead to wrong results. Actually values of both branch "
"will be attached to the list. See example below."
msgstr ""

#: ../../source/sharpbits.rst:108
msgid ""
"The above code raise ``ConcretizationTypeError`` exception directly for "
"Jax backend since Jax jit doesn't support tensor value if condition."
msgstr ""

#: ../../source/sharpbits.rst:110
msgid "Similarly, conditional gate application must be takend carefully."
msgstr ""

#: ../../source/sharpbits.rst:145
msgid "AD Consistency"
msgstr ""

#: ../../source/sharpbits.rst:147
msgid ""
"TF and JAX backend manage the differentiation rules differently for "
"complex-valued function (actually up to a complex conjuagte). See issue "
"discussion `tensorflow issue "
"<https://github.com/tensorflow/tensorflow/issues/3348>`_."
msgstr ""

#: ../../source/sharpbits.rst:149
msgid ""
"In TensorCircuit, currently we make the difference in AD transparent, "
"namely, when switching the backend, the AD behavior and result for "
"complex valued function can be different and determined by the nature "
"behavior of the corresponding backend framework. All AD relevant ops such"
" as ``grad`` or ``jacrev`` may be affected. Therefore, the user must be "
"careful when dealing with AD on complex valued function in a backend "
"agnostic way in TensorCircuit."
msgstr ""

#: ../../source/sharpbits.rst:152
msgid ""
"See example script on computing Jacobian with different modes on "
"different backends: `jacobian_cal.py <https://github.com/tencent-quantum-"
"lab/tensorcircuit/blob/master/examples/jacobian_cal.py>`_. Also see the "
"code below for a reference:"
msgstr ""

